<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Infrastructure - Tag - &lt; 言われない ></title><link>https://novaannabella.github.io/the_unspoken/ja/tags/infrastructure/</link><description>Infrastructure - Tag - &lt; 言われない ></description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Fri, 08 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/ja/tags/infrastructure/" rel="self" type="application/rss+xml"/><item><title>クラウドのリスク</title><link>https://novaannabella.github.io/the_unspoken/ja/risks_of_cloud/</link><pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/risks_of_cloud/</guid><description>クラウドのリスク - なぜ二度考えるべきか 序論 クラウドに対する熱狂は見逃すことができません。 小さなスタートアップから大企業まで、みんながクラウドの柔軟性、スケーリングの可能性、そしてシンプルさを語っています。 しかし、イカロスが太陽に近づきすぎて焼けたように、考えずにクラウドへ移行する企業も危険な落とし穴を経験するかもしれません。
コストと透明性 クラウドの世界は魅力的に見えるかもしれませんが、その輝く外観の裏にはよく高いコストが隠れています。新たにクラウドに移行する企業は、請求書がどれだけ早く積み上がるかをしばしば遅すぎるまでに気付きます。 AWSを利用する多くの会社が従業員を解雇したり、給料を凍結したりするのは偶然ではありません。クラウドの柔軟性はしばしばコストの予測不可能さによって相殺されます。クラウドが非常に高価であることは明らかであり、受け入れるべきです。
テクノロジーとアーキテクチャ クラウドの広範な機能は夢のように思えますが、それは悪夢にもなり得ます。標準プロトコルの欠如は、あなたのシステムが外部または標準 の技術と容易にまたはまったく通信できないことを意味します。さらに、インフラストラクチャー、アーキテクチャ、サービスがしばしば一体化することがあり、 それは両方のレベルでの調整を必要とすることを意味します - 複雑さと頭痛のレシピです。
セキュリティリスクと透明性 クラウドプロバイダーは包括的なセキュリティメカニズムを提供していますが、クラウドはサイバー攻撃の魅力的なターゲットであり続けます。問題は、それがオンプレミスソリューションよりも安全かどうかではなく、リスクを取るかどうかです。透明性の問題もあ ります：利用と費用に対する明確な視野なしには、意味のある予算計画はほぼ不可能です。多くの隠れたコストにより、すべてのコスト計画は少なくとも2倍にする必要があります。
長期戦略とヒューマンリソース クラウドへの選択は、孤立してではなく、より広範で長期的なビジネス戦略の一部として検討されるべきです。また、技術の選択は、あなたが企業に採用する必要がある専門家の種類に、侮れない影響を与えます。
結論 クラウドは、しばしば公称される万能薬ではありません。それには真剣に考慮すべきリスクが含まれています。コストからセキュリティ、技術的制限から人事計画まで、クラウドへの決定は複雑であり、軽率に行うべきではありません。柔軟性、標準化、透明性を提供 できるKubernetesなどの代替案を考慮する価値があります。
お問い合わせ GitHubの問題.</description></item><item><title>イリュージョン サーバーレス &amp; クラウド</title><link>https://novaannabella.github.io/the_unspoken/ja/illusion_serverless_cloud/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/illusion_serverless_cloud/</guid><description><![CDATA[サーバーレス関数のクラウド内でのイリュージョン 序論 私は、マーケティングが如何に頻繁に健全な判断を勝つのかに失望しています。多くのマネージャーは自分自身の専門家である開発者を無視します。これはクラウドへの移行にも当てはまります。ネタバレ：お金を節約しなければならない人は、クラウドを避けるべきです。なぜなら新しいバズワードの&quot;サーバーレス&quot;はクラウド上で次の意味を持ちます：あなたがソフトウェアの面倒を見、私たちがハードウェアの管理をします。しかし、あなたが有能で、モチベーションがあり、好奇心旺盛な管理者を持っていれば、「サーバーレス」も自分で運用することができます（例えば、KNative）。
サーバーレス関数 vs マイクロサービス: マイクロサービス 典型的なステートレスマイクロサービスは特定の機能/ドメインを担当し、コンテナのオーケストレーション環境で提供されます。この環境は、インフラ、セキュリティ、ファイアウォール、ログ、メトリクス、シークレット、ネットワーク、バックアップなど多くの ことを管理します。大きな利点は、マイクロサービスがローカルで少ないリソースで統合テストが可能であり、クラウド/サーバーに依存しない（どこでも利用可能）であることです。
サーバーレス関数 事前に小さな冗談：パラドックスですが、真実です-サーバーレス機能は大いにサーバー環境に依存しています。 :) 典型的なサーバーレス機能もまた特定の機能/ドメインのみを処理し、フレームワークなしで 純粋なコードで書かれることで、マイクロサービスよりも高速になることを目指しています（これもマイクロサービスにとっての良いエクササイズ）。大きい 利点は、サーバーレス機能が自動的にスケーリングされることです。ただし、各サーバーレス機能には セキュリティ、ファイヤーウォール、ネットワーク、ログ、メトリクス、 シークレット、キャッシング、バックアップなど、インフラを定義するための大量のGlueCodeが必要です。 そのため、APIを含むファイルのコピーなどの簡単な機能でも、コード（IaCを含む）がすぐに1500行にもなることがあります。 管理コストは、管理から開発へと1:N（1からサーバーレスまで） 機能）。知識と実装はこれにより 集約されていなく、すぐに不安定になる可能性があります。さらに、維持費が増加します。 また、サーバーレスの統合テストは稀で、または大変な労力をかけて行われることがあります。 結局のところ、サーバーレス機能の複雑さは個々のマイクロサービスよりも明らかに高いです。 複雑さが増すと、保守性も低くなります。新しいチームメンバーにとっては困難で、明らかに より多くの知識が必要です。
サーバーレスと一般的なクラウド ほとんどのクラウド技術は最新のものではありません。たとえば、Node.js、Java、Pythonなどの言語や技術は、更新が困難で、ほとんど待つしかありません。 また、MongoDB、MySQL、Kafka、NATS、RabbitMQ、Redis、Prometheus、InfluxDB、Grafana、 Kibana、Elastic Searchなどの現代的で標準的な技術は、利用できないか、費用がかかりすぎます。 これらのスタンダードサービスがない場合、しばしば仮想的な石器時代になり、古くなったソリューション、たとえば 外部へのコミュニケーションにWebhooksを使用します。さらに、規制、 コンプライアンス、データプライバシー、信頼性についての裁量が大幅に制限されます。
したがって、クラウドは、AWS、Azure、Google、On-Premiseなど、すばやく コストを比較したり切り替えたりできるように、アプリカジョンに依存しない形で運用されるべきです。 クラウドでも制限があり、それが創造的な回避策につながり、複雑さを増したりします。また、包括的なテストもコストがかかります。なぜなら、各開発者がクラウドで自己の開発環境を 必要とする一方、多くのクラウドサービスはほとんどまたはまったくローカルでテストできないからです。 しかしながら、テストがない状態でもクラウドは高い。オンプレミスシステムでは主に ハードウェアコストが発生しますが、クラウドではさらにトラフィック、いくつかのスタンダードサービス、そしてしばしば 二重課税のための追加の支払いが必要です。おまけに、クラウドでは簡単に全体像を見失います。なぜなら、それがユーザーフレンドリーさではなく コストについて扱われているからです。コストはそんなに隠されていて、それに気づくのは遅すぎる時です。
クラウドと特にサーバーレスの領域で、アーキテクチャとインフラの基礎は 新たに発明されなければなりません。なぜなら、その実装は利用できる機能に大きく依存するからです。 アーキテクチャを設計した後に思うことはいつもこれです：&ldquo;それは一つのサービスでよかっただろう&rdquo;。
私にとって、サーバーレスは興味深い考え方であり、スケールするのが容易ですが、コストを下げるものではありません。むしろ、それは開発においてもっと多くの知識と時間を必要とします。サーバーレスやクラウドは規律と前知識が必要です。 もしオンプレミスシステムに対する知識がなければ、クラウドを使うことで簡単にはならないでしょう。 開発者はどのようにしてインフラストラクチャの知識を追加で身につけることができるのでしょうか？
私は、クラウドアーキテクチャよりも、適切に管理されたKubernetesクラスタを選びます。 スタッフはスケーリングしません。多くの開発者はコードを書くための規律がありません。 残念ながら、これは開発者の80%に当てはまります。どのようにして、これらの開発者がクラウドを操作できるようにするのでしょうか？
組織がサーバーレスアーキテクチャとクラウドの課題と影響を全面的に理解することは重要です。これには、技術的な知識だけでなく、戦略的なアプローチも必要です。軽率なクラウドへの移行は複雑さ、高いコスト、開発者の過負荷に繋がる可能性があります。
要約すると、クラウド上のサーバーレスは有望なコンセプトではありますが、慎重に考慮すべきです。コスト、複雑さ、維持可能性、開発チームの能力を考慮する必要があります。 すべての会社には異なる要求と優先順位があります。クラウド上のサーバーレスが最適な解決策であるか、それとも他のアプローチ 例えば、適切なKubernetesクラスタがより良い選択であるかどうか、考え抜いた決定を下すべきです。
サーバーレスとクラウドコンピューティングの成功は、技術的な専門知識と 戦略的な計画、ビジネス要件の明確な理解の組み合わせに依存します。そのみなさんがサーバーレスの幻想を 見透かし、自社のソフトウェア開発に最適な決断を下すことができます。
結論 クラウドでのサーバーレス関数の導入は、柔軟性、スケーラビリティ、およびエンジニアの インフラストラクチャタスクからの解放を約束します。しかし、この幻想には惑わされてはならない。クラウドへの 移行とサーバーレス関数の使用は、多くの課題をもたらします。 開発者は、実際の開発以外に新しい「言語」を学習し、適切なサポートがない場合は 更なる責任を負う必要があります。 サーバーレス関数の複雑さは、開発者がインフラストラクチャ定義、セキュリティ、スケーリングなど、多くの追加 タスクを引き受ける必要があるため、マイクロサービスよりも高いことが多い。真の統合テストは 困難で、運用のための先行知識と経験はクラウドでさらに重要となります。 クラウド自体もさらなる課題をもたらします。多くのクラウド技術は最新のものでは ありませんし、最新の標準サービスを利用することは高価であったり、不可能であったりする場合があります。規制要件、コンプライアンス、および データプライバシーは遊びの幅を制限します。また、クラウドのコストは容易にコントロールを失い、 支出の全体像をすぐに見失うことがあります。 全体として、サーバーレスとクラウドの利点と欠点を慎重に比較検討する必要があります。 企業は、特定の要件、チームの既存のノウハウ、クラウドへの移行の長期的な影響を 考慮するべきです。 包括的な分析に基づいた明確な意思決定は、プロジェクトの成功と収益性にとって非常に重要です。 最終的には、企業には、開発者を適切にサポートし、クラウドのコストと複雑性を現実的に評価し、よく管理されたKubernetesクラスターなどの代替ソリューションを検討する責任があります。 明確な戦略と自社のニーズに対する深い理解を持つことで、企業はクラウドとサーバーレス機能の利点を最大限に活用し、幻想を見抜くことができます。]]></description></item></channel></rss>