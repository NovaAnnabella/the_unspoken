<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Gradle - Tag - &lt; 言われない ></title><link>https://novaannabella.github.io/the_unspoken/ja/tags/gradle/</link><description>Gradle - Tag - &lt; 言われない ></description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Mon, 01 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/ja/tags/gradle/" rel="self" type="application/rss+xml"/><item><title>Mavenに戻る?</title><link>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</guid><description><![CDATA[Mavenに戻る？ 10年間のGradle。安堵の探求とMavenの強さの再発見への短い旅。 開発者のポテンシャルの最大化 - 私たちはもっと時間節約ツールが必要です 私が興味を持つのは、よく見落とされたり、あまり議論されないテーマです。素晴らしいテクノロジーが使われていることが多いのですが、それに伴う問題についてはほとんど語られません。 開発は今日では非常に手間がかかるようになりました。 &ldquo;Serverless&rdquo;、&ldquo;Low Code&rdquo;、&ldquo;IaC&rdquo;、&ldquo;Big Data&rdquo;、&ldquo;Cloud&rdquo;、&ldquo;DevOps&rdquo;、&ldquo;You Build it You run it&quot;など、カッコいいバズワードが溢れており、開発者は既に余裕以上の付加的な課題に直面しています。タスクが増えると、専門家がほとんどいなくなり、何かが焦点を失うことが常にあります。それゆえ、自動化と時間節約は非常に重要です。”Don’t make me think”や&quot;Works out of the Box&quot;などの品質指標は、私がまだGradleで見ていないものです。公平を期すために、Gradleは私たちに作業を増やすだけの現代的なツールだけではありません。
簡易性と自動化への幻影的な追求 SOAP以来、私はXMLベースの設定に対して深い嫌悪感を抱いています。Gradleを使用することで、バインドスクリプトの作成が簡単になることを期待していましたが、 残念ながら、私の期待とモチベーションは次第に低下していきました。Gradleは柔軟性を追求しており、そのために自動化と品質を犠牲にしています。開発者たちは ソフトウェアの信頼性に影響を与えることなくトレンドに盲目的に追従しています。Grad leビルドスクリプトをシンプルでメンテナンスが容易に保つためには、強い規律が求められます。そのような規律はソースコード中にはめったに見つけられず、そのためビルドスクリプト中でもそれはさらに稀です。
翻訳と回避策 - ビルドスクリプトが挑戦になるとき GradleはバックグラウンドでMavenとあまり変わらない方法で動作します。したがって、いくつかの翻訳が必要です。Dependency Catalog、Maven Release Plugin、Dependabotなどの機能は、基本的にはMavenがすでに備えている基本機能のワークアラウンドです。 Gradleの柔軟性により、しばしば複雑なビルド設定が生じ、維持が難しくなります。 Gradleプラグインは、互換性の問 題、制限、または限定的な開発が頻繁に発生します。これらの問題は、Gradleエコシステムの進化する性質、Gradleが使用されるさまざまな環境、および各プラグインの特定の実装と保守の労力のために生じます。全ては相互に関連しています。
Gradleのドミノ効果 - 実世界での悪夢のシナリオ 私は数年しか経っていないマイクロサービスをたくさん見てきましたが、既にGradleのせいで保守できなくなっていました。 これが初めてのことだと言うことは重要であり、いえ、それらはジュニアデブではありませんでした。
私の任務は、Spring Boot 2.xを2.7にアップグレードすることでした。ネタバレ：私は一年後に諦めました！問題は簡単に言うと：
Gradleビルドファイルが必要 -&gt; 私のローカルJavaバージョンを11にダウングレード（WTF）（通常Javaは下位互換性がある ここでもSdkManのような回避ツールがあります&hellip;） Spring Bootアップデートが必要 -&gt; Gradleアップデート（WTF） Gradleアップデートが必要 -&gt; プラグインアップデート プラグインアップデートが必要 -&gt; Groovyアップデート（WTF） Groovyアップデートが必要 -&gt; テストフレームワークとテストのアップデート（WTF） テストフレームワークアップデートが必要 -&gt; 依存性のアップデート [&hellip;] さらに、一部のプラグインは新しいGradleバージョンとは互換性がなく、一部は開発が中止され、他のプラグインと互換性がない、Gradle KTSだけでなくGradle Groovyでも機能する、あるいは単純にリミットがあります。 Springのような大手供給業者のプラグインでも、Mavenプラグインと比較して機能が制限されています。結果的に、誰も正しくメンテナンスできないクールな短いGradleビルドファイルが手に入りました。デベロッパーでさえも、それを書いた人たちはまだGradleを愛しています。私が知っているのは、Gradleのスクリプトを真剣に理解하たり書くことができる人はわずかしかいません。 Mavenの力の再発見 - Mavenの魔法の力を利用する これが私のお気に入りのMavenの機能です： プラグインは、定義することなく直接コマンドラインから起動、設定することができます。プラス他のプラグイン構成から大きく独立しています。]]></description></item></channel></rss>