<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Gradle - Tag - &lt; 言われない ></title><link>https://novaannabella.github.io/the_unspoken/ja/tags/gradle/</link><description>Gradle - Tag - &lt; 言われない ></description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Mon, 01 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/ja/tags/gradle/" rel="self" type="application/rss+xml"/><item><title>```Mavenに戻りますか？```</title><link>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</guid><description>Mavenに戻る？ 1 [![maven_vs_gradle](/images/content/maven_vs_gradle.png)](https://phauer.com/2018/moving-back-from-gradle-to-maven/) ↓
1 [![maven_vs_gradle](/images/content/maven_vs_gradle.png)](https://phauer.com/2018/moving-back-from-gradle-to-maven/) 10年のGradle。楽になるための探求とMavenの強さを再発見する短い旅。 マークダウンのテキストを日本語に翻訳するには、翻訳すべきテキストが与えられていません。もう一度お試しください。
開発者のポテンシャル最大化 - より時間を節約できるツールが必要です よく見落とされたり滅多に話されないテーマに興味があります。すばらしい技術が使われていることがよくありますが、それに関連する問題について誰も話しません。 開発は非常に手間のかかるものになっています。 「サーバーレス」、「ローコード」、「IaC」、「ビッグデータ」、「クラウド」、「DevOps」、「You Build it You run it」などのかっこいいバズワードが既に開発者には十分にあるため、追加の課題が多くなっています。多くの 課題があるため、エキスパートはほとんどいなくなり、いつも何かがフォーカスを置かれなくなります。そのため、自動化と時間の節約が非常に重要です。Gradleでは、すでに「考えさせない」、「箱から出したらすぐに動く」という良質な特徴が見られます。 公平を期すために言えば、Gradleは私たちにとって容易にする代わりに作業を増やすだけのモダンなツールではありません。
単純さと自動化の錯覚的な探索 SOAP以来、XMLベースの設定に対する根深い嫌悪感があります。Gradleでは、バインドスクリプトの書き方が簡単になることを期待していましたが、残念なことに、私の希望とやる気はますます低下しています。Gradleは柔軟性を追求し、自動化や 品質を犠牲にしています。開発者たちは、ソフトウェアの信頼性に対する影響を考慮せずに、トレンドに盲目的に追従しています。Gradleビルドスクリプトをシンプルでメンテナンスが容易にするためには、強いディシプリンが必要です。そのようなディシプリ ンは、ソースコードですらまれであるため、ビルドスクリプトにおいてはさらにまれです。
翻訳とワークアラウンド - ビルドスクリプトが課題になる場合 Gradleは、Mavenとほとんど同じようにバックグラウンドで動作します。そのため、いくつかの翻訳が必要です。依存関係カタログ、Mavenリリースプラグイン、Dependabotなどの機能は、実際にはMavenがすでに持っている基本的な機 能のワークアラウンドです。Gradleの柔軟性により、よくメンテナンスが困難な複雑なビルド構成が生じることがあります。Gradleプラグインには、互換性の問題、制限、または機能制限がある場合があります。これらの問題は、Gradleエコシステ ムの進化する性質、Gradleが使用されるさまざまな環境の多様性、および各プラグインの特定の実装とメンテナンスの負担によって生じます。すべてが関連しています。
Gradleのドミノ効果 - 現実世界における悪夢のシナリオ 私は、わずか数年でGradleの問題によりメンテナンスできなくなった多くのマイクロサービスを見てきました。重要なことに、これが私がこれを見た最初の回ではなく、いいえ、初心者の開発者ではありませんでした。
私のタスクは、Spring Boot 2.xから2.7にアップグレードすることでした。ネタバレ：1年後に諦めました！問題は次のとおりです。
Gradleビルドファイルには、ローカルのJavaバージョンを11にダウングレードする必要があります（WTF）（通常、Javaは下位互換性があります。SdkManなどのWorkaroundツールもあります&amp;hellip;） Spring Bootのアップデートには、Gradleのアップデートが必要です（WTF） Gradleのアップデートには、プラグインのアップデートが必要です プラグインのアップデートには、Groovyの更新が必要です（WTF） Groovyのアップデートには、テストフレームワークのアップデートが必要です（WTF） テストフレームワークのアップデートには、依存関係のアップデートが必要です [&amp;hellip;] さらに、新しいGradleバージョンでは一部のプラグインが動作しない、いくつかのプラグインはもはや開発が進んでおらず、他のプラグインと非互換性がある、Gradle KTSでしか動作せず、Gradle Groovyでは動作しない、あるいは単に制限があるものがあります。Springなどの大手提供業者のプラグインですら、Mavenプラグインと比較して機能が制限されています。最終的に、私は誰も適切にメンテナンスできない素晴らしい簡単なGradleビルドファイルを持っています。それを書いた開発者たちさえも、まだGradleを愛しています。Gradleスクリプトを本気で理解または書くことができる人はほとんどいないと知っています。
Mavenの強さの再発見 - Mavenの魔法を活用する 以下は私が好きなMavenの機能です： プラグインは、定義する必要がなく、コマンドラインから直接起動および構成できます。さらに、他のプラグインの構成から大部分は独立しています。
コマンド例 説明 リンク mvn versions:use -latest-versions バージョンを更新する-Dependabotが必要ですか？はい、私のプロジェクトは何年もの間最新のバージョンに問題なく更新され、面倒なマージリクエストなしで済みます。 https://www.mojohaus.org/versions/versions-maven-plugin/plugin-info.html mvn versions:set -DnewVersion=1.0.0 プロジェクトバージョンを設定する&amp;hellip; https://www.mojohaus.org/versions/versions-maven-plugin/index.html mvn license:add-third-party 依存関係をリストアップし、そのライセンスを表示します（除外されたライセンスでも失敗する場合があります） https://www.</description></item></channel></rss>