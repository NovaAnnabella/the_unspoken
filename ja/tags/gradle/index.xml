<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Gradle - Tag - &lt; 言われない ></title><link>https://novaannabella.github.io/the_unspoken/ja/tags/gradle/</link><description>Gradle - Tag - &lt; 言われない ></description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Mon, 01 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/ja/tags/gradle/" rel="self" type="application/rss+xml"/><item><title>メイブンに戻る？</title><link>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</guid><description><![CDATA[Mavenに戻る？ [maven_vs_gradle](https://phauer.com/2018/moving-back-from-gradle-to-maven/)
Gradleの10年。救いを求めて、Mavenの力を再発見する小旅行。 開発者のポテンシャルを最大限に引き出す - 時間短縮のためのツールがもっと必要です。 見過ごされがちな話題や、ほとんど語られない話題は、私にとって興味深いものです。よくクールな技術が使われていることがあります、 しかし、その問題点についてはほとんど語られません。 最近、開発には非常にコストがかかるようになりました。 サーバーレス」「ローコード」「IaC」「ビッグデータ」「クラウド」「DevOps」「You build it you run it」などのクールなバズワードで、開発者はすでに十分満足しています。 などなど、開発者はすでに十分すぎるほどの追加タスクを抱えています。タスクが増えるということは、専門家がほとんどいないことを意味します。 タスクが増えるということは、専門家がほとんどいないということであり、集中するために何かが常におろそかになってしまうということです。だからこそ、自動化と時間短縮がメガになるのです。 重要なのです。&ldquo;考えさせない &ldquo;と &ldquo;箱から出して使える &ldquo;は、Gradleではまだ見かけない良質な機能ですね。 は、まだ見ることができません。公平を期すために、Gradleは、私たちの仕事を楽にする代わりに、私たちの仕事を難しくする唯一の最新ツールではありません。 を簡単にしてくれます。
シンプルさと自動化の幻想的な追求 SOAP以来、私はXMLベースの設定に根強い嫌悪感を抱いています。Gradleを使うことで、バインドスクリプトを書くのが簡単になることを期待していました。 バインドスクリプトを書くのが簡単になることを期待していました。しかし、残念ながら、私の希望とモチベーションは その度にモチベーションが下がっていきました。Gradleは柔軟性を追求し、そのために自動化と品質を犠牲にしています。開発者は盲目的にトレンドに従う 開発者は、ソフトウェアの信頼性への影響を考慮せず、盲目的にトレンドに従う。Gradleを作るには ビルドスクリプトをシンプルかつ低メンテナンスにするには、強い規律が必要です。そのような規律は、すでにソースコードでは稀である ソースコードではすでに希少であり、したがってビルドスクリプトではさらに希少である。
翻訳と回避策 - ビルドスクリプトが困難になったとき GradleはMavenとバックグラウンドでの動作が大きく異なるわけではありません。そのため、いくつかの翻訳が必要です。のような機能は 依存性カタログ、Mavenリリースプラグイン、Dependabotなどの機能は、実際には、Mavenがすでに持っている基本的な機能の回避策です。 Mavenがすでに持っている基本的な機能の回避策です。Gradleの柔軟性には、しばしば複雑なビルド構成が伴います、 維持することが困難である。 Gradleのプラグインは、しばしば互換性の問題、制限、または限定された進歩を持っています。これらの問題は これらの問題は、Gradleエコシステムの進化、Gradleが使用される環境の多様性、および特定の実装と が使用される環境の多様性、および各プラグインに必要な特定の実装とメンテナンスの労力によって発生します。すべては相互につながっています。
Gradleのドミノ効果 - 現実世界における悪夢のシナリオ 数年しか経っていないのに、Gradleのせいですでにメンテナンスができなくなったマイクロサービスをたくさん見てきました。 Gradleに起因する。重要なことですが、このようなものを見たのは初めてではありませんし、いや、彼らは ジュニア・デベロッパー 私のタスクは、Spring Boot 2.xから2.7へのアップグレードを実行することでした。ネタバレです：1年後に諦めました 私はあきらめました！問題点を簡単に説明しますと * Gradleのビルドファイルで、ローカルのJavaのバージョンを11にダウングレードする必要がある（WTF）（通常、Javaは下位互換性があります。 を11にダウングレードする必要があります (通常、Javaは下位互換性があります - また、SdkManのような回避ツールがあります&hellip;) * Spring Bootのアップデートに必要なのは -&gt; Gradleのアップデート(WTF) * Gradleのアップデートには、プラグインのアップデートが必要です。 * プラグインのアップデートには、Groovyのアップデート(WTF)が必要です。 * Groovy のアップデートには -&gt; テストフレームワークとテストのアップデート(WTF)が必要です。 * テストフレームワークのアップデートには、依存関係のアップデートが必要です。 * [&hellip;] また、一部のプラグインは新しいGradleのバージョンで動作しない、開発が終了している、他のGradleのバージョンと互換性がない、開発が終了している、他のGradleのバージョンと互換性がない、があります。 他のプラグインと互換性がない、Gradle KTSでのみ動作し、Gradle Groovyでは動作しない、または単に制限がある。 といった制限があります。Springのような大きなベンダーのプラグインでさえ、Mavenプラグインと比較して機能が制限されています。 限られた機能しかない。結局、クールで短いGradleビルドファイルができあがるのですが、誰もそれを維持することができません、 それを書いた開発者でさえも、Gradleが好きなのです。私は、Gradleスクリプトを真剣に理解している人はほとんどいないと思います。 Gradleスクリプトを理解し、本気で書いている人はほとんどいません。]]></description></item></channel></rss>