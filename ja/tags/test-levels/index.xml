<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Test Levels - Tag - &lt; 言われない ></title><link>https://novaannabella.github.io/the_unspoken/ja/tags/test-levels/</link><description>Test Levels - Tag - &lt; 言われない ></description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Wed, 31 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/ja/tags/test-levels/" rel="self" type="application/rss+xml"/><item><title>テストレベル：適切なバランスを見つける</title><link>https://novaannabella.github.io/the_unspoken/ja/test_level/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/test_level/</guid><description>テストレベル適切なバランスを見つける [testebenen](https://martinfowler.com/articles/microservice-testing/)
はじめに テストの話題は、まだまだ解釈の余地のある未知の領域のようです。従来の テストピラミッドが疑問視され、新たなテストピラミッドが出現しています。私見ですが、テストピラミッドは必要ないと思います。 テストピラミッドは必要ないが、何をテストする必要があるのかを明確に理解する必要がある。低レベルのテストは、しばしば はあまり意味がありません。を確実にするために、主に動作のテストに焦点を当てるべきである。 API やUIが希望通りに動作することを確認するための動作テストに重点を置くべきです。可能なテストの種類の包括的な概要は、ここで見ることができます： Martinfowler Testing。
レベル1 - 模擬テストと単体テスト 目標：アプリケーションの中で最も小さなテスト可能なソフトウェア部分を行使して、期待通りに動作するかどうかを確認する。 の作業を行う。 モックテストやユニットテストは逆効果になることがあり、開発プロセスの妨げになることが多い。これらのテストは、しばしば文脈から切り離され これらのテストは、しばしば文脈から切り離され、現実とはほとんど関係がありません。また、既存のユニットテストによって不要な機能を維持する役割しか果たさないこともあります。 ユニットテストによって不要な機能を維持するのに役立つだけです。モックが追加されると、それは自滅的な運動となる。モックテストで期待される モックテストの結果は、元のモックで定義されたものに限定されます。エンドユーザー は内部機能には興味がない。例えば ログインシナリオの場合、 loginUser(name, password, securityAlgorithm).ユニットテストが securityAlgorithm のヌルチェックを行う場合 securityAlgorithmパラメータを設定することができないため、多くのテストが行われます。 securityAlgorithmパラメータを設定します。
レベル2 - 統合テスト 目的：コンポーネント間の通信経路や相互作用をチェックし、インターフェイスの不具合を検出する。 インターフェイスの不具合を検出する。 統合テストは、アプリケーションの異なる部分の性能と独立性についての貴重な洞察を提供します。 を適用することができます。モックが少なくなったことで、テストはより理解しやすくなりました。しかし、まだコンテキストが不足しており、以下のようなリスクがあります。 統合テストは、モックの数が少ないと、単なるユニットテストに見えてしまう危険性があります。
レベル3 - コンポーネントテスト 目的：テスト対象ソフトウェアの範囲をテスト対象システムの一部に限定し、内部コードのインターフェイスやテストダブ ルの使用により、テスト対象システムを操作すること。 テスト対象コードを他のコンポーネントから分離するために、内部コードインターフェースとテストダブ ルの使用により、システムを操作する。 のコンポーネントを使用する。 コンポーネントテストは、アプリケーションの品質と性能に関する多くの情報を提供します。モックの代わりに モックの代わりに、最終的にアプリケーションをテストすることになります。コンポーネントテストとエンドツーエンドテストの境界は、重要ではありません。 重要ではありません。良いテスト環境であれば、その境界はしばしば曖昧になり、孤立したコンテキストのない関数ではなく、実際の挙動をテストすることができます。 をテストできるようになります。しかし、追加のテストクラスを作成することは しかし、生産コードにコンポーネントスタブ、フェイク、モックなどの追加のテストクラスを作成することは、メンテナンスのオーバーヘッドを増やすことになります。
レベル4 - コントラクトテスト このコードブロックの目的は、外部サービスの境界での相互作用をチェックし、消費サービスの契約要件に準拠していることを確認することである。 消費するサービスの契約上の要件に準拠していることを確認することです。 契約テストはしばしばユニットテストに似ており、両者の違いはごくわずかである。開発者の中には このテストは、基本的にユニットテストにサーバーを加えたようなものです。このような しかし、これらのテストを維持する労力は割に合わないかもしれません。たとえば、Pact テストでは REST API の loginUser?name=aa&amp;amp;password=bb) を使用し、Pact サーバーに事前にアップロードされた JSON スキーマのレスポンスを期待します。 サーバーにアップロードされます。このスキーマは静的なもので、APIレスポンスに不正な日付フォーマットやタイムゾーンなどのエラーが発生しやすい。 APIレスポンスにエラーが発生する可能性があります。その悪影響は甚大なものになりかねません。
レベル5 - エンドツーエンドテスト（ブラックボックステストとも呼ばれる）。 目的：システム全体を最初から最後までテストすることにより、システムが外部要件を満たし、目標を達成することを検証する。 最初から最後まで エンド・ツー・エンドのテストは、信頼性と堅牢性に優れています。テスト環境の構築というハードルを乗り越えれば、その努力は報われます。 その努力は報われます。テストは実際の動作をシミュレートするため、モックが不要になります。エラーの発生頻度も少なく ローカルでの再現が容易になります。本番で時間のかかるデバッグやロギングがほぼ回避され、稀にしか発生しないインシデントもほぼ回避されます。 レアなインシデントが発生するようなことはほとんどありません。開発者が本番データを扱う頻度が低くなる（もしそうなら）。 開発者が本番データを扱うことが少なくなるため、責任が軽減され、集中力が高まります。さらに、以下のような自動化も可能です。 自動ソフトウェアアップデートなどの自動化により、動作がすでにテストされているため、実装が容易になります。他にも利点があります！一度 テストが再利用可能な形で書かれていれば、それを負荷テストに統合して、機能の包括的な全体像を把握することができます。 機能性の全体像を把握することができます。また、これらのテストは、本番環境で継続的に実行することができます。 し、さまざまなワークフローの状況をリアルタイムで把握することができます。あるサブシステム、例えば RESTサービスなどがオフラインになった場合、どのユーザーのワークフローが影響を受けるかを即座に特定することが可能です。 が影響を受ける。</description></item></channel></rss>