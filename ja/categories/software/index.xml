<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Software - Category - &lt; 言われない ></title><link>https://novaannabella.github.io/the_unspoken/ja/categories/software/</link><description>Software - Category - &lt; 言われない ></description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Wed, 24 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/ja/categories/software/" rel="self" type="application/rss+xml"/><item><title>イリュージョン サーバーレス＆クラウド</title><link>https://novaannabella.github.io/the_unspoken/ja/illusion_serverless_cloud/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/illusion_serverless_cloud/</guid><description>クラウドのサーバーレス機能という幻想 ！！【aws_costs_twitter_1】(/images/content/onprem_vs_cloud.png)
はじめに 私は、マーケティングが常識に勝つことがいかに多いかを残念に思っています。多くの経営者が、開発者という専門家よりも自分を優先してしまう。 開発者である自分たちの専門家よりも、自分たちを優先してしまうのです。これは、クラウドへの移行にも当てはまります。ネタバレです：お金を節約する必要があるのなら お金を節約したいのであれば、クラウドは避けるべきでしょう。なぜなら、クラウドにおける新しい流行語「サーバーレス」とは、「あなたはソフトウェアの世話をし、私たちはハードウェアの世話をする」という意味だからです。 あなたはソフトウェアの世話をし、私たちはハードウェアの世話をします。しかし、有能でやる気と探究心のある管理者がいれば、そ は、サーバーレスそのものを運用することもできます（例：KNative)。 aws_costs_twitter_1】(/images/content/aws_costs_twitter_1.png)
サーバーレス機能 vs マイクロサービス： マイクロサービス 典型的なステートレスマイクロサービスは、特定の機能/ドメインを担当し、コンテナオーケストレーション環境にデプロイされます。 コンテナオーケストレーション環境に展開されます。この環境は、インフラ、セキュリティ、ファイアウォール、ロギング、メトリクス、シークレット、ネットワーク、バックアップなどを管理します、 ロギング、メトリクス、シークレット、ネットワーキング、バックアップなどです。大きな利点は、マイクロサービスをローカルに展開する際に、以下のような手間がかからないことです。 少ない クラウドやサーバーに依存しない（どこにでもデプロイできる）ことです。
サーバーレス機能 事前に少し冗談を言うと、逆説的だが本当だ、サーバーレス機能はサーバー環境に大きく依存する。:) 典型的なサーバーレス機能は、特定の1つの機能/ドメインのみを担当し、マイクロサービスよりも高速になるようにフレームワークを使わずに純粋なコードで書かれています。 マイクロサービスより速くなるために、コードを書く必要があります（マイクロサービスの良い練習にもなります）。大きな 大きな利点は、サーバーレス機能が自動的にスケールすることです。しかし、各サーバーレス機能には しかし、サーバーレス機能には、セキュリティ、ファイアウォール、ネットワーク、ロギング、メトリクスなどのインフラを定義するために、かなりの量のGlueCodeが必要です、 シークレット、キャッシング、バックアップなどなど。 そのため、APIを含むファイルのコピーといった単純な機能でも、すぐに1500行のコード（IaCを含む。） が関与する可能性があります。 管理コストは、管理から開発へ1:Nの割合でシフトします（1がサーバーレス 関数に対して）。そのため、知識と実装はもはや 束ねられなくなり、すぐに不安定になる可能性がある。さらに、メンテナンスコストも増加する。 また、真の統合テストはサーバーレスでは稀であり、あるいは多大な努力によってのみ可能である。 結局のところ、サーバーレス機能の複雑さは、単一のマイクロサービスよりも大幅に高くなります。 複雑性が高いということは、保守性が低いということでもあります。新しいチームメンバーは、より困難な時間を過ごし、より多くの予備知識を必要とします。 より多くの予備知識が必要になります。
サーバーレスとクラウド全般 ほとんどのクラウド技術は、最新のものではありません。例えば、Node.js、Java、Python、その他の言語や技術は最新ではありません。 言語や技術をアップデートするのは容易ではなく、通常は待つしかありません。 MongoDB、MySQL、Kafka、NATS、RabbitMQ、Redis、Prometheus、InfluxDB、Grafanaなどの最新かつ標準的な技術であっても、 Kibana, Elastic Search などは、利用できないか、値段が高いです。 このような標準的なサービスがないと、仮想的な石器時代にいるようなもので、時代遅れのソリューション、例えば 例えば、外部とのコミュニケーションにはウェブフックを使用します。さらに、規制やコンプライアンス、データ保護、フェイルセーフなどの問題でも、操作の幅が狭くなっています、 また、規制やコンプライアンス、データ保護、フェイルセーフなどの問題で、操作の余地が大きく制限されます。 したがって、AWS、Azure、Google、オンプレミスなどを素早く切り替え、コストを比較できるようにするために、クラウドは非正規雇用で運用する必要があります。 コストを比較することができます。 また、クラウドでは制限が多いため、独創的な回避策を講じることになり、かえって複雑さを増してしまう。 を増大させます。また、開発者ごとにクラウド上の開発環境が必要なため、統合テストも高額になる可能性があります。 クラウドサービスの多くは、ローカルではほとんどテストできないか、まったくテストできないからです。 しかし、テストを行わない場合でも、クラウドは高価です。オンプレミスの場合、主に次のようなコストがかかります。 オンプレミスの場合は主にハードウェアのコストですが、クラウドではトラフィックや標準的なサービス、さらに多くの場合、複数の税金も支払わなければなりません。 また、複数の税金を支払うこともあります。さらに、クラウドでは物事がわからなくなりがちです。 使い勝手の良さではなく、お金の問題なのです。そのコストはとても隠れていて、手遅れになったときに初めて気づく。 は手遅れなのです。 クラウド、特にサーバーレスでは、アーキテクチャとインフラストラクチャの基本を作り直さなければならない。 は、実装が利用可能な機能に大きく依存するため、再発明が必要です。 アーキテクチャを設計するたびに思うのは、「これは単一のサービスであったかもしれない」ということです。 could have been」です。 私にとって、サーバーレスは面白いアイデアで、うまくスケールしますが、コストを削減することはできません。には、そのようなことはありません。 それどころか、開発にはずっと多くの知識と時間が必要です。サーバーレスやクラウドには、規律や の事前知識が必要です。 オンプレミスのシステムでその知識がなければ、クラウドでも簡単にはいかないでしょう。 開発者はどうやってインフラの知識を追加で身につければいいのでしょうか？ 私はクラウドアーキテクチャよりも、よく管理されたKubernetesクラスタの方がいいと思います。 人がスケールしないのです。多くの開発者は、コードを書くことに規律がない。 残念ながら、これは開発者の80パーセントに当てはまる。では、これらの開発者はどうやってクラウドを運用できるようになるのでしょうか？ クラウド？ 組織は、サーバーレスアーキテクチャとクラウドの課題と意味合いを十分に理解することが重要です。 は、サーバーレスアーキテクチャとクラウドの課題と意味を十分に理解する必要があります。そのためには、技術的な知識だけでなく、戦略的なアプローチも必要です。A クラウドへの移行を熟考せずに行うと、複雑化し、コストが上昇し、開発者に過度な負担をかけることになります。 要約すると、クラウドにおけるサーバーレスは有望なコンセプトですが、慎重に検討する必要があります。 は慎重に検討する必要があります。コスト、複雑さ、保守性、開発チームのスキルなどを考慮する必要がある。 は考慮されるべきです。 企業によって、要件や優先順位は異なります。について、十分な情報を得た上で決定する必要があります。 クラウド上のサーバーレスが適切なソリューションなのか、それとも、例えばKubernetのような代替アプローチなのか、十分な情報を得た上で決定する必要があります。 例えば、Kubernetes Clusterのような代替アプローチがより良い選択なのか、十分な情報を得た上で決定する必要があります。 サーバーレスやクラウドコンピューティングの導入を成功させるには、技術的な専門知識と戦略的な計画、そしてビジネスの明確な理解の組み合わせが必要です。 戦略的なプランニングとビジネス要件の明確な理解の組み合わせが必要です。それができて初めて、サーバーレスの幻想は と、自身のソフトウェア開発にとって正しい判断を下すことができます。</description></item><item><title>```Mavenに戻りますか？```</title><link>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</guid><description>Mavenに戻る？ 1 [![maven_vs_gradle](/images/content/maven_vs_gradle.png)](https://phauer.com/2018/moving-back-from-gradle-to-maven/) ↓
1 [![maven_vs_gradle](/images/content/maven_vs_gradle.png)](https://phauer.com/2018/moving-back-from-gradle-to-maven/) 10年のGradle。楽になるための探求とMavenの強さを再発見する短い旅。 マークダウンのテキストを日本語に翻訳するには、翻訳すべきテキストが与えられていません。もう一度お試しください。
開発者のポテンシャル最大化 - より時間を節約できるツールが必要です よく見落とされたり滅多に話されないテーマに興味があります。すばらしい技術が使われていることがよくありますが、それに関連する問題について誰も話しません。 開発は非常に手間のかかるものになっています。 「サーバーレス」、「ローコード」、「IaC」、「ビッグデータ」、「クラウド」、「DevOps」、「You Build it You run it」などのかっこいいバズワードが既に開発者には十分にあるため、追加の課題が多くなっています。多くの 課題があるため、エキスパートはほとんどいなくなり、いつも何かがフォーカスを置かれなくなります。そのため、自動化と時間の節約が非常に重要です。Gradleでは、すでに「考えさせない」、「箱から出したらすぐに動く」という良質な特徴が見られます。 公平を期すために言えば、Gradleは私たちにとって容易にする代わりに作業を増やすだけのモダンなツールではありません。
単純さと自動化の錯覚的な探索 SOAP以来、XMLベースの設定に対する根深い嫌悪感があります。Gradleでは、バインドスクリプトの書き方が簡単になることを期待していましたが、残念なことに、私の希望とやる気はますます低下しています。Gradleは柔軟性を追求し、自動化や 品質を犠牲にしています。開発者たちは、ソフトウェアの信頼性に対する影響を考慮せずに、トレンドに盲目的に追従しています。Gradleビルドスクリプトをシンプルでメンテナンスが容易にするためには、強いディシプリンが必要です。そのようなディシプリ ンは、ソースコードですらまれであるため、ビルドスクリプトにおいてはさらにまれです。
翻訳とワークアラウンド - ビルドスクリプトが課題になる場合 Gradleは、Mavenとほとんど同じようにバックグラウンドで動作します。そのため、いくつかの翻訳が必要です。依存関係カタログ、Mavenリリースプラグイン、Dependabotなどの機能は、実際にはMavenがすでに持っている基本的な機 能のワークアラウンドです。Gradleの柔軟性により、よくメンテナンスが困難な複雑なビルド構成が生じることがあります。Gradleプラグインには、互換性の問題、制限、または機能制限がある場合があります。これらの問題は、Gradleエコシステ ムの進化する性質、Gradleが使用されるさまざまな環境の多様性、および各プラグインの特定の実装とメンテナンスの負担によって生じます。すべてが関連しています。
Gradleのドミノ効果 - 現実世界における悪夢のシナリオ 私は、わずか数年でGradleの問題によりメンテナンスできなくなった多くのマイクロサービスを見てきました。重要なことに、これが私がこれを見た最初の回ではなく、いいえ、初心者の開発者ではありませんでした。
私のタスクは、Spring Boot 2.xから2.7にアップグレードすることでした。ネタバレ：1年後に諦めました！問題は次のとおりです。
Gradleビルドファイルには、ローカルのJavaバージョンを11にダウングレードする必要があります（WTF）（通常、Javaは下位互換性があります。SdkManなどのWorkaroundツールもあります&amp;hellip;） Spring Bootのアップデートには、Gradleのアップデートが必要です（WTF） Gradleのアップデートには、プラグインのアップデートが必要です プラグインのアップデートには、Groovyの更新が必要です（WTF） Groovyのアップデートには、テストフレームワークのアップデートが必要です（WTF） テストフレームワークのアップデートには、依存関係のアップデートが必要です [&amp;hellip;] さらに、新しいGradleバージョンでは一部のプラグインが動作しない、いくつかのプラグインはもはや開発が進んでおらず、他のプラグインと非互換性がある、Gradle KTSでしか動作せず、Gradle Groovyでは動作しない、あるいは単に制限があるものがあります。Springなどの大手提供業者のプラグインですら、Mavenプラグインと比較して機能が制限されています。最終的に、私は誰も適切にメンテナンスできない素晴らしい簡単なGradleビルドファイルを持っています。それを書いた開発者たちさえも、まだGradleを愛しています。Gradleスクリプトを本気で理解または書くことができる人はほとんどいないと知っています。
Mavenの強さの再発見 - Mavenの魔法を活用する 以下は私が好きなMavenの機能です： プラグインは、定義する必要がなく、コマンドラインから直接起動および構成できます。さらに、他のプラグインの構成から大部分は独立しています。
コマンド例 説明 リンク mvn versions:use -latest-versions バージョンを更新する-Dependabotが必要ですか？はい、私のプロジェクトは何年もの間最新のバージョンに問題なく更新され、面倒なマージリクエストなしで済みます。 https://www.mojohaus.org/versions/versions-maven-plugin/plugin-info.html mvn versions:set -DnewVersion=1.0.0 プロジェクトバージョンを設定する&amp;hellip; https://www.mojohaus.org/versions/versions-maven-plugin/index.html mvn license:add-third-party 依存関係をリストアップし、そのライセンスを表示します（除外されたライセンスでも失敗する場合があります） https://www.</description></item><item><title>```言葉にできないこと```</title><link>https://novaannabella.github.io/the_unspoken/ja/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/</guid><description>&amp;ldquo;The Unspoken&amp;quot;へようこそ 自分自身で決めてください、あなたにとって真実であることと、目をそらすべきトピックは何ですか。
私は禁じられた開発領域に挑戦し、開発の世界で非凡なことを明らかにします。 あなたの視野を広げ、限界を超えてください。 常に考えていてください、テクノロジーは私たちの生活と仕事を簡単にするためのものです。
私たちの中で最も勇敢な人だけが他の人のために開発をより簡単にすることが本当にできます。
いつ、最後にメンテナンスフリーで、堅牢で、あなた自身が必要でないプロジェクトを完了したことがありますか？ ないですか？ それなら、何か間違っています！</description></item></channel></rss>