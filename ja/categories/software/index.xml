<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Software - Category - &lt; 言われない ></title><link>https://novaannabella.github.io/the_unspoken/ja/categories/software/</link><description>Software - Category - &lt; 言われない ></description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Wed, 24 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/ja/categories/software/" rel="self" type="application/rss+xml"/><item><title>イリュージョン サーバーレス＆クラウド</title><link>https://novaannabella.github.io/the_unspoken/ja/illusion_serverless_cloud/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/illusion_serverless_cloud/</guid><description>クラウドのサーバーレス機能という幻想 ！！【aws_costs_twitter_1】(/images/content/onprem_vs_cloud.png)
はじめに 私は、マーケティングが常識に勝つことがいかに多いかを残念に思っています。多くの経営者が、開発者という専門家よりも自分を優先してしまう。 開発者である自分たちの専門家よりも、自分たちを優先してしまうのです。これは、クラウドへの移行にも当てはまります。ネタバレです：お金を節約する必要があるのなら お金を節約したいのであれば、クラウドは避けるべきでしょう。なぜなら、クラウドにおける新しい流行語「サーバーレス」とは、「あなたはソフトウェアの世話をし、私たちはハードウェアの世話をする」という意味だからです。 あなたはソフトウェアの世話をし、私たちはハードウェアの世話をします。しかし、有能でやる気と探究心のある管理者がいれば、そ は、サーバーレスそのものを運用することもできます（例：KNative)。 aws_costs_twitter_1】(/images/content/aws_costs_twitter_1.png)
サーバーレス機能 vs マイクロサービス： マイクロサービス 典型的なステートレスマイクロサービスは、特定の機能/ドメインを担当し、コンテナオーケストレーション環境にデプロイされます。 コンテナオーケストレーション環境に展開されます。この環境は、インフラ、セキュリティ、ファイアウォール、ロギング、メトリクス、シークレット、ネットワーク、バックアップなどを管理します、 ロギング、メトリクス、シークレット、ネットワーキング、バックアップなどです。大きな利点は、マイクロサービスをローカルに展開する際に、以下のような手間がかからないことです。 少ない クラウドやサーバーに依存しない（どこにでもデプロイできる）ことです。
サーバーレス機能 事前に少し冗談を言うと、逆説的だが本当だ、サーバーレス機能はサーバー環境に大きく依存する。:) 典型的なサーバーレス機能は、特定の1つの機能/ドメインのみを担当し、マイクロサービスよりも高速になるようにフレームワークを使わずに純粋なコードで書かれています。 マイクロサービスより速くなるために、コードを書く必要があります（マイクロサービスの良い練習にもなります）。大きな 大きな利点は、サーバーレス機能が自動的にスケールすることです。しかし、各サーバーレス機能には しかし、サーバーレス機能には、セキュリティ、ファイアウォール、ネットワーク、ロギング、メトリクスなどのインフラを定義するために、かなりの量のGlueCodeが必要です、 シークレット、キャッシング、バックアップなどなど。 そのため、APIを含むファイルのコピーといった単純な機能でも、すぐに1500行のコード（IaCを含む。） が関与する可能性があります。 管理コストは、管理から開発へ1:Nの割合でシフトします（1がサーバーレス 関数に対して）。そのため、知識と実装はもはや 束ねられなくなり、すぐに不安定になる可能性がある。さらに、メンテナンスコストも増加する。 また、真の統合テストはサーバーレスでは稀であり、あるいは多大な努力によってのみ可能である。 結局のところ、サーバーレス機能の複雑さは、単一のマイクロサービスよりも大幅に高くなります。 複雑性が高いということは、保守性が低いということでもあります。新しいチームメンバーは、より困難な時間を過ごし、より多くの予備知識を必要とします。 より多くの予備知識が必要になります。
サーバーレスとクラウド全般 ほとんどのクラウド技術は、最新のものではありません。例えば、Node.js、Java、Python、その他の言語や技術は最新ではありません。 言語や技術をアップデートするのは容易ではなく、通常は待つしかありません。 MongoDB、MySQL、Kafka、NATS、RabbitMQ、Redis、Prometheus、InfluxDB、Grafanaなどの最新かつ標準的な技術であっても、 Kibana, Elastic Search などは、利用できないか、値段が高いです。 このような標準的なサービスがないと、仮想的な石器時代にいるようなもので、時代遅れのソリューション、例えば 例えば、外部とのコミュニケーションにはウェブフックを使用します。さらに、規制やコンプライアンス、データ保護、フェイルセーフなどの問題でも、操作の幅が狭くなっています、 また、規制やコンプライアンス、データ保護、フェイルセーフなどの問題で、操作の余地が大きく制限されます。 したがって、AWS、Azure、Google、オンプレミスなどを素早く切り替え、コストを比較できるようにするために、クラウドは非正規雇用で運用する必要があります。 コストを比較することができます。 また、クラウドでは制限が多いため、独創的な回避策を講じることになり、かえって複雑さを増してしまう。 を増大させます。また、開発者ごとにクラウド上の開発環境が必要なため、統合テストも高額になる可能性があります。 クラウドサービスの多くは、ローカルではほとんどテストできないか、まったくテストできないからです。 しかし、テストを行わない場合でも、クラウドは高価です。オンプレミスの場合、主に次のようなコストがかかります。 オンプレミスの場合は主にハードウェアのコストですが、クラウドではトラフィックや標準的なサービス、さらに多くの場合、複数の税金も支払わなければなりません。 また、複数の税金を支払うこともあります。さらに、クラウドでは物事がわからなくなりがちです。 使い勝手の良さではなく、お金の問題なのです。そのコストはとても隠れていて、手遅れになったときに初めて気づく。 は手遅れなのです。 クラウド、特にサーバーレスでは、アーキテクチャとインフラストラクチャの基本を作り直さなければならない。 は、実装が利用可能な機能に大きく依存するため、再発明が必要です。 アーキテクチャを設計するたびに思うのは、「これは単一のサービスであったかもしれない」ということです。 could have been」です。 私にとって、サーバーレスは面白いアイデアで、うまくスケールしますが、コストを削減することはできません。には、そのようなことはありません。 それどころか、開発にはずっと多くの知識と時間が必要です。サーバーレスやクラウドには、規律や の事前知識が必要です。 オンプレミスのシステムでその知識がなければ、クラウドでも簡単にはいかないでしょう。 開発者はどうやってインフラの知識を追加で身につければいいのでしょうか？ 私はクラウドアーキテクチャよりも、よく管理されたKubernetesクラスタの方がいいと思います。 人がスケールしないのです。多くの開発者は、コードを書くことに規律がない。 残念ながら、これは開発者の80パーセントに当てはまる。では、これらの開発者はどうやってクラウドを運用できるようになるのでしょうか？ クラウド？ 組織は、サーバーレスアーキテクチャとクラウドの課題と意味合いを十分に理解することが重要です。 は、サーバーレスアーキテクチャとクラウドの課題と意味を十分に理解する必要があります。そのためには、技術的な知識だけでなく、戦略的なアプローチも必要です。A クラウドへの移行を熟考せずに行うと、複雑化し、コストが上昇し、開発者に過度な負担をかけることになります。 要約すると、クラウドにおけるサーバーレスは有望なコンセプトですが、慎重に検討する必要があります。 は慎重に検討する必要があります。コスト、複雑さ、保守性、開発チームのスキルなどを考慮する必要がある。 は考慮されるべきです。 企業によって、要件や優先順位は異なります。について、十分な情報を得た上で決定する必要があります。 クラウド上のサーバーレスが適切なソリューションなのか、それとも、例えばKubernetのような代替アプローチなのか、十分な情報を得た上で決定する必要があります。 例えば、Kubernetes Clusterのような代替アプローチがより良い選択なのか、十分な情報を得た上で決定する必要があります。 サーバーレスやクラウドコンピューティングの導入を成功させるには、技術的な専門知識と戦略的な計画、そしてビジネスの明確な理解の組み合わせが必要です。 戦略的なプランニングとビジネス要件の明確な理解の組み合わせが必要です。それができて初めて、サーバーレスの幻想は と、自身のソフトウェア開発にとって正しい判断を下すことができます。</description></item><item><title>The Unspoken</title><link>https://novaannabella.github.io/the_unspoken/ja/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/</guid><description>&amp;ldquo;The Unspoken&amp;quot;へようこそ Entscheide selbst, was für dich wahr ist und von welchen Themen du lieber wegschaust.
Ich wage es, die verbotenen Bereiche der Entwicklung und decke das Außergewöhnliche möchte in der Welt der Entwicklung auf. Erweitere auch deinen Horizont und verschiebe deine Grenzen. Bedenke immer, Technologie sollte unser Leben und unsere Arbeit erleichtern.
Nur die Mutigsten unter uns schaffen es wirklich, die Entwicklung für andere einfacher zu machen.
Wann hast du das letzte Mal ein Projekt abgeschlossen, das praktisch wartungsfrei, robust war und dich nicht mehr benötigte?</description></item><item><title>またMavenに戻りますか？</title><link>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</guid><description><![CDATA[Mavenに戻る？ 10 Jahre Gradle. Auf der Sucher nach Erleichterung und eine kurze Reise zur Wiederentdeckung der Stärke von Maven. 10年のGradle。簡素化のための探求とMavenの強さの再発見への短い旅。 Since there is no German markdown text provided, I am unable to translate it to Japanese. Please provide the necessary text for the translation.
開発者のポテンシャルの最大化 - より時間の節約になるツールが必要です 頻繁に見過ごされたり、滅多に議論されないテーマに興味があります。クールなテクノロジーが使用されていることがよくありますが、それに関連する問題について誰も話しません。 開発は今日では非常に手間がかかるようになりました。 &ldquo;Serverless&rdquo;、&ldquo;Low Code&rdquo;、&ldquo;IaC&rdquo;、&ldquo;Big Data&rdquo;、&ldquo;Cloud&rdquo;、&ldquo;DevOps&rdquo;、&ldquo;You Build it You run it&quot;などのクールなバズワードを持っている開発者は、既に十分以上の追加業務を抱えています。そのため、タスクが増えると、専門家がほとんどいなくなり、フォーカスが何かを無視することを意味します。そのため、自動化と時間の節約は非常に重要です。 &ldquo;Don&rsquo;t make me think&quot;と&quot;Works out of the Box&quot;はすでに優れた品質の指標ですが、Gradleでは見ることができません。公正を期すために、Gradleは私たちに仕事を簡単にするのではなく、私たちを苦しめる現代のツールの唯一のものではありません。
シンプルさと自動化を求める幻想的な探求 Seit SOAP habe ich eine tief verwurzelte Abneigung gegen XML-basierte Konfigurationen.]]></description></item></channel></rss>