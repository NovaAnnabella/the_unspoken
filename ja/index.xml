<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>&lt; 言われない ></title><link>https://novaannabella.github.io/the_unspoken/ja/</link><description>Explore the untold secrets and controversial realms of development in our daring blog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Mon, 01 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/ja/index.xml" rel="self" type="application/rss+xml"/><item><title>テストレベル：適切なバランスを見つける</title><link>https://novaannabella.github.io/the_unspoken/ja/test_level/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/test_level/</guid><description>テストレベル適切なバランスを見つける [testebenen](https://martinfowler.com/articles/microservice-testing/)
はじめに テストの話題は、まだまだ解釈の余地のある未知の領域のようです。従来の テストピラミッドが疑問視され、新たなテストピラミッドが出現しています。私見ですが、テストピラミッドは必要ないと思います。 テストピラミッドは必要ないが、何をテストする必要があるのかを明確に理解する必要がある。低レベルのテストは、しばしば はあまり意味がありません。を確実にするために、主に動作のテストに焦点を当てるべきである。 API やUIが希望通りに動作することを確認するための動作テストに重点を置くべきです。可能なテストの種類の包括的な概要は、ここで見ることができます： Martinfowler Testing。
レベル1 - 模擬テストと単体テスト 目標：アプリケーションの中で最も小さなテスト可能なソフトウェア部分を行使して、期待通りに動作するかどうかを確認する。 の作業を行う。 モックテストやユニットテストは逆効果になることがあり、開発プロセスの妨げになることが多い。これらのテストは、しばしば文脈から切り離され これらのテストは、しばしば文脈から切り離され、現実とはほとんど関係がありません。また、既存のユニットテストによって不要な機能を維持する役割しか果たさないこともあります。 ユニットテストによって不要な機能を維持するのに役立つだけです。モックが追加されると、それは自滅的な運動となる。モックテストで期待される モックテストの結果は、元のモックで定義されたものに限定されます。エンドユーザー は内部機能には興味がない。例えば ログインシナリオの場合、 loginUser(name, password, securityAlgorithm).ユニットテストが securityAlgorithm のヌルチェックを行う場合 securityAlgorithmパラメータを設定することができないため、多くのテストが行われます。 securityAlgorithmパラメータを設定します。
レベル2 - 統合テスト 目的：コンポーネント間の通信経路や相互作用をチェックし、インターフェイスの不具合を検出する。 インターフェイスの不具合を検出する。 統合テストは、アプリケーションの異なる部分の性能と独立性についての貴重な洞察を提供します。 を適用することができます。モックが少なくなったことで、テストはより理解しやすくなりました。しかし、まだコンテキストが不足しており、以下のようなリスクがあります。 統合テストは、モックの数が少ないと、単なるユニットテストに見えてしまう危険性があります。
レベル3 - コンポーネントテスト 目的：テスト対象ソフトウェアの範囲をテスト対象システムの一部に限定し、内部コードのインターフェイスやテストダブ ルの使用により、テスト対象システムを操作すること。 テスト対象コードを他のコンポーネントから分離するために、内部コードインターフェースとテストダブ ルの使用により、システムを操作する。 のコンポーネントを使用する。 コンポーネントテストは、アプリケーションの品質と性能に関する多くの情報を提供します。モックの代わりに モックの代わりに、最終的にアプリケーションをテストすることになります。コンポーネントテストとエンドツーエンドテストの境界は、重要ではありません。 重要ではありません。良いテスト環境であれば、その境界はしばしば曖昧になり、孤立したコンテキストのない関数ではなく、実際の挙動をテストすることができます。 をテストできるようになります。しかし、追加のテストクラスを作成することは しかし、生産コードにコンポーネントスタブ、フェイク、モックなどの追加のテストクラスを作成することは、メンテナンスのオーバーヘッドを増やすことになります。
レベル4 - コントラクトテスト このコードブロックの目的は、外部サービスの境界での相互作用をチェックし、消費サービスの契約要件に準拠していることを確認することである。 消費するサービスの契約上の要件に準拠していることを確認することです。 契約テストはしばしばユニットテストに似ており、両者の違いはごくわずかである。開発者の中には このテストは、基本的にユニットテストにサーバーを加えたようなものです。このような しかし、これらのテストを維持する労力は割に合わないかもしれません。たとえば、Pact テストでは REST API の loginUser?name=aa&amp;amp;password=bb) を使用し、Pact サーバーに事前にアップロードされた JSON スキーマのレスポンスを期待します。 サーバーにアップロードされます。このスキーマは静的なもので、APIレスポンスに不正な日付フォーマットやタイムゾーンなどのエラーが発生しやすい。 APIレスポンスにエラーが発生する可能性があります。その悪影響は甚大なものになりかねません。
レベル5 - エンドツーエンドテスト（ブラックボックステストとも呼ばれる）。 目的：システム全体を最初から最後までテストすることにより、システムが外部要件を満たし、目標を達成することを検証する。 最初から最後まで エンド・ツー・エンドのテストは、信頼性と堅牢性に優れています。テスト環境の構築というハードルを乗り越えれば、その努力は報われます。 その努力は報われます。テストは実際の動作をシミュレートするため、モックが不要になります。エラーの発生頻度も少なく ローカルでの再現が容易になります。本番で時間のかかるデバッグやロギングがほぼ回避され、稀にしか発生しないインシデントもほぼ回避されます。 レアなインシデントが発生するようなことはほとんどありません。開発者が本番データを扱う頻度が低くなる（もしそうなら）。 開発者が本番データを扱うことが少なくなるため、責任が軽減され、集中力が高まります。さらに、以下のような自動化も可能です。 自動ソフトウェアアップデートなどの自動化により、動作がすでにテストされているため、実装が容易になります。他にも利点があります！一度 テストが再利用可能な形で書かれていれば、それを負荷テストに統合して、機能の包括的な全体像を把握することができます。 機能性の全体像を把握することができます。また、これらのテストは、本番環境で継続的に実行することができます。 し、さまざまなワークフローの状況をリアルタイムで把握することができます。あるサブシステム、例えば RESTサービスなどがオフラインになった場合、どのユーザーのワークフローが影響を受けるかを即座に特定することが可能です。 が影響を受ける。</description></item><item><title>AIハイプ</title><link>https://novaannabella.github.io/the_unspoken/ja/ai_behind_the_hype/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/ai_behind_the_hype/</guid><description>AI in the real world - Think Beyond the hype [ai_ml](https://en.wikipedia.org/wiki/Weak_artificial_intelligence)
はじめに 人工知能（AI）の活用というと、期待とともに神経質な興奮がある。 AIが仕事の世界に革命を起こし、人間のスキルを冗長化させるという説もあります。しかし、その前に しかし、私たちはAIの世界に飛び込む前に、いくつかの重要な点を考慮する必要があります。AIは間違いなく進歩している。 しかし、それは決して新しいものではなく、私たちが理解し、尊重しなければならない重大な制限を伴っています。 ネタバレです：AIは単なるツールのひとつです。ターミネーター』のような映画のようなシーンには、まだまだ遠い。 ChatGPTのような現在のAIは、ソフトウェアがどのように設計されるべきかの良い例でもあります！サービスオリエンテッドで スイスアーミーナイフのように、何でもかんでも解決できるわけではなく、役に立つことも再利用できることもほとんどありません。 挑発的な質問をいくつか： * AIは新しいものであり、自分の仕事を引き継ぐことができると考えているコンピュータ科学者は、自分の視野と専門性をよく考えるべきじゃないだろうか。 AIが新しいものであり、自分の仕事を引き継ぐことができると考えているコンピュータ科学者は、自分の視野と専門性についてもっとよく考えるべきでは？ * AIモデルに移行するサラリーマン・データサイエンティスト。 が切り替えをしている：なぜ、あなたの特定のAIモデルは、大きなすべてのケーナー言語モデルより劣っているのですか？あなたは何をしましたか？ あなたのユースケースに特化した同じように優れたモデルを作るために、あなたは以前何をし、何が欠けているのでしょうか？
境界の把握 GPTを含むAIモデルは、既存のデータやパターンに基づいて学習されます。そのため パターン認識やコンテンツ生成は得意ですが、真の意味での理解や、トレーニングの先を考える力はありません。 を理解し、それを超える思考を持つことができません。この境界を認識することが、助けになります、 現実的な期待値を設定することができます。そこになかったものは存在しないのです。質的、機密性、安全性 情報は少数派です。先輩より後輩の方が多いのが常です。だから、AIは「Hello World」のような低レベルの例でしか使えない。 低レベルの &amp;ldquo;Hello World &amp;ldquo;のような例でしか使えない。プログラマーのように、自分の仕事を恐れている人は、仕事の質について真剣に考える必要がある。 自分の仕事の質について真剣に考えなければならない。
AI開発にかかるコストと演算能力の重要性 AIの発展は、ハードウェアの絶え間ない進化に大きく支えられています。のようなAIモデルは、複雑なタスクを処理するために膨大なコンピューティングパワーを必要とします。 GPT-3.5のようなAIモデルは、複雑なタスクを処理するために膨大なコンピューティングパワーを必要とします。AIのコストは、強力なGPUやTPUなどのハードウェアと密接に関連しています。 GPUやTPUなどのハードウェアが必要です。さらに、インフラの運用・保守にも継続的なコストがかかります。 また、インフラストラクチャーの運用やメンテナンスにも費用がかかります。計算能力の向上はAIの可用性を高めていますが、それでもなお多額の投資が必要です。 大きな投資が必要です。コストの最適化と効率的なリソース管理は、AIプロジェクトの経済的成功を確実にするために極めて重要です。 コスト最適化と効率的なリソース管理は、AIプロジェクトを経済的に成功させるために不可欠です。そのため、健全なコスト分析とプランニングは、AIを導入する際に不可欠なものである。 は、AIを導入する際に必要不可欠なものです。
人間の知能を補完する AIは人間の知能を代替するのではなく、補完するツールとしてとらえるべきです。人間の 判断力、批判的思考、創造性が不可欠であることに変わりはありません。AIは貴重な洞察を提供し、反復的なタスクと自動化することができます。 を自動化し、生産性を向上させることができますが、重要な意思決定のために単独で使用するべきではありません。 を決定する必要があります。あなたの信頼がなければ、AIはあなたが必要とするすべての側面を取り入れることはできません。 ITでは、以下のような問題について、AIは自分では考えません：レジリエンス、セキュリティ、コンプライアンス、データプライバシー、 読み取り可能性、パフォーマンス、シンプルさ、パターン、適時性など。 AI3Dモデリング例：アレックスがBlenderでAIをテスト (見た目は良いが、「こんにちは」程度) が、「Hello World」の例に過ぎない) 私のAIコード生成の経験を一言で言うと、「ばかばかしい」です！を書くような開発者は、私は残したくない。 保ちたくはないですね。それでも、私はAIをスパーリングパートナー別名説明効果として、一種の自己反省のように使っています。 AIの最も効果的な使用は、人間とAIシステムとのコラボレーションによって達成されることが多い。AIは、次のようなことを支援します。 しかし、より洗練されたものにするためには、人間の監督と介入が不可欠です。 監督と介入は、結果を洗練し、改善し、最適化するために重要です。
バリデーションとテスト AIが生成した結果は、常に徹底的に検証され、テストされるべきです。コードであれ、コンテンツであれ、その他の 出力であっても、生成された結果の品質、正しさ、コンプライアンスを確保するためには、人間の監督が必要です。 生成された結果の品質、正確性、コンプライアンスを保証するために、人間の監督が必要です。不正確な、あるいは誤解を招くような結果に依存することを避けるためには、検証プロセスが重要です。 不正確な、あるいは誤解を招くような結果に依存しないために、検証プロセスは重要です。別のAIを使ってAIの検証をするのはやめてください。それは、私がクラステストの添削をするようなものです 自分では訂正せず、生徒を使うようなものです。
継続的な学習と適応 AIモデルは、状況の変化に適応するために継続的に更新・改良される必要があります。 AIが生成する結果の正確性、妥当性、有用性を確保するためには、フィードバックループと反復的な改良が必要です。 AIが生成する結果の正確性、妥当性、有用性を確保するために、フィードバックループと改善が必要です。AIの学習プロセスは決して止まることはありません。</description></item><item><title>イリュージョン サーバーレス＆クラウド</title><link>https://novaannabella.github.io/the_unspoken/ja/illusion_serverless_cloud/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/illusion_serverless_cloud/</guid><description>クラウドのサーバーレス機能という幻想 ！！【aws_costs_twitter_1】(/images/content/onprem_vs_cloud.png)
はじめに 私は、マーケティングが常識に勝つことがいかに多いかを残念に思っています。多くの経営者が、開発者という専門家よりも自分を優先してしまう。 開発者である自分たちの専門家よりも、自分たちを優先してしまうのです。これは、クラウドへの移行にも当てはまります。ネタバレです：お金を節約する必要があるのなら お金を節約したいのであれば、クラウドは避けるべきでしょう。なぜなら、クラウドにおける新しい流行語「サーバーレス」とは、「あなたはソフトウェアの世話をし、私たちはハードウェアの世話をする」という意味だからです。 あなたはソフトウェアの世話をし、私たちはハードウェアの世話をします。しかし、有能でやる気と探究心のある管理者がいれば、そ は、サーバーレスそのものを運用することもできます（例：KNative)。 aws_costs_twitter_1】(/images/content/aws_costs_twitter_1.png)
サーバーレス機能 vs マイクロサービス： マイクロサービス 典型的なステートレスマイクロサービスは、特定の機能/ドメインを担当し、コンテナオーケストレーション環境にデプロイされます。 コンテナオーケストレーション環境に展開されます。この環境は、インフラ、セキュリティ、ファイアウォール、ロギング、メトリクス、シークレット、ネットワーク、バックアップなどを管理します、 ロギング、メトリクス、シークレット、ネットワーキング、バックアップなどです。大きな利点は、マイクロサービスをローカルに展開する際に、以下のような手間がかからないことです。 少ない クラウドやサーバーに依存しない（どこにでもデプロイできる）ことです。
サーバーレス機能 事前に少し冗談を言うと、逆説的だが本当だ、サーバーレス機能はサーバー環境に大きく依存する。:) 典型的なサーバーレス機能は、特定の1つの機能/ドメインのみを担当し、マイクロサービスよりも高速になるようにフレームワークを使わずに純粋なコードで書かれています。 マイクロサービスより速くなるために、コードを書く必要があります（マイクロサービスの良い練習にもなります）。大きな 大きな利点は、サーバーレス機能が自動的にスケールすることです。しかし、各サーバーレス機能には しかし、サーバーレス機能には、セキュリティ、ファイアウォール、ネットワーク、ロギング、メトリクスなどのインフラを定義するために、かなりの量のGlueCodeが必要です、 シークレット、キャッシング、バックアップなどなど。 そのため、APIを含むファイルのコピーといった単純な機能でも、すぐに1500行のコード（IaCを含む。） が関与する可能性があります。 管理コストは、管理から開発へ1:Nの割合でシフトします（1がサーバーレス 関数に対して）。そのため、知識と実装はもはや 束ねられなくなり、すぐに不安定になる可能性がある。さらに、メンテナンスコストも増加する。 また、真の統合テストはサーバーレスでは稀であり、あるいは多大な努力によってのみ可能である。 結局のところ、サーバーレス機能の複雑さは、単一のマイクロサービスよりも大幅に高くなります。 複雑性が高いということは、保守性が低いということでもあります。新しいチームメンバーは、より困難な時間を過ごし、より多くの予備知識を必要とします。 より多くの予備知識が必要になります。
サーバーレスとクラウド全般 ほとんどのクラウド技術は、最新のものではありません。例えば、Node.js、Java、Python、その他の言語や技術は最新ではありません。 言語や技術をアップデートするのは容易ではなく、通常は待つしかありません。 MongoDB、MySQL、Kafka、NATS、RabbitMQ、Redis、Prometheus、InfluxDB、Grafanaなどの最新かつ標準的な技術であっても、 Kibana, Elastic Search などは、利用できないか、値段が高いです。 このような標準的なサービスがないと、仮想的な石器時代にいるようなもので、時代遅れのソリューション、例えば 例えば、外部とのコミュニケーションにはウェブフックを使用します。さらに、規制やコンプライアンス、データ保護、フェイルセーフなどの問題でも、操作の幅が狭くなっています、 また、規制やコンプライアンス、データ保護、フェイルセーフなどの問題で、操作の余地が大きく制限されます。 したがって、AWS、Azure、Google、オンプレミスなどを素早く切り替え、コストを比較できるようにするために、クラウドは非正規雇用で運用する必要があります。 コストを比較することができます。 また、クラウドでは制限が多いため、独創的な回避策を講じることになり、かえって複雑さを増してしまう。 を増大させます。また、開発者ごとにクラウド上の開発環境が必要なため、統合テストも高額になる可能性があります。 クラウドサービスの多くは、ローカルではほとんどテストできないか、まったくテストできないからです。 しかし、テストを行わない場合でも、クラウドは高価です。オンプレミスの場合、主に次のようなコストがかかります。 オンプレミスの場合は主にハードウェアのコストですが、クラウドではトラフィックや標準的なサービス、さらに多くの場合、複数の税金も支払わなければなりません。 また、複数の税金を支払うこともあります。さらに、クラウドでは物事がわからなくなりがちです。 使い勝手の良さではなく、お金の問題なのです。そのコストはとても隠れていて、手遅れになったときに初めて気づく。 は手遅れなのです。 クラウド、特にサーバーレスでは、アーキテクチャとインフラストラクチャの基本を作り直さなければならない。 は、実装が利用可能な機能に大きく依存するため、再発明が必要です。 アーキテクチャを設計するたびに思うのは、「これは単一のサービスであったかもしれない」ということです。 could have been」です。 私にとって、サーバーレスは面白いアイデアで、うまくスケールしますが、コストを削減することはできません。には、そのようなことはありません。 それどころか、開発にはずっと多くの知識と時間が必要です。サーバーレスやクラウドには、規律や の事前知識が必要です。 オンプレミスのシステムでその知識がなければ、クラウドでも簡単にはいかないでしょう。 開発者はどうやってインフラの知識を追加で身につければいいのでしょうか？ 私はクラウドアーキテクチャよりも、よく管理されたKubernetesクラスタの方がいいと思います。 人がスケールしないのです。多くの開発者は、コードを書くことに規律がない。 残念ながら、これは開発者の80パーセントに当てはまる。では、これらの開発者はどうやってクラウドを運用できるようになるのでしょうか？ クラウド？ 組織は、サーバーレスアーキテクチャとクラウドの課題と意味合いを十分に理解することが重要です。 は、サーバーレスアーキテクチャとクラウドの課題と意味を十分に理解する必要があります。そのためには、技術的な知識だけでなく、戦略的なアプローチも必要です。A クラウドへの移行を熟考せずに行うと、複雑化し、コストが上昇し、開発者に過度な負担をかけることになります。 要約すると、クラウドにおけるサーバーレスは有望なコンセプトですが、慎重に検討する必要があります。 は慎重に検討する必要があります。コスト、複雑さ、保守性、開発チームのスキルなどを考慮する必要がある。 は考慮されるべきです。 企業によって、要件や優先順位は異なります。について、十分な情報を得た上で決定する必要があります。 クラウド上のサーバーレスが適切なソリューションなのか、それとも、例えばKubernetのような代替アプローチなのか、十分な情報を得た上で決定する必要があります。 例えば、Kubernetes Clusterのような代替アプローチがより良い選択なのか、十分な情報を得た上で決定する必要があります。 サーバーレスやクラウドコンピューティングの導入を成功させるには、技術的な専門知識と戦略的な計画、そしてビジネスの明確な理解の組み合わせが必要です。 戦略的なプランニングとビジネス要件の明確な理解の組み合わせが必要です。それができて初めて、サーバーレスの幻想は と、自身のソフトウェア開発にとって正しい判断を下すことができます。</description></item><item><title>またMavenに戻りますか？</title><link>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</guid><description><![CDATA[Mavenに戻る？ 10 Jahre Gradle. Auf der Sucher nach Erleichterung und eine kurze Reise zur Wiederentdeckung der Stärke von Maven. 10年のGradle。簡素化のための探求とMavenの強さの再発見への短い旅。 Since there is no German markdown text provided, I am unable to translate it to Japanese. Please provide the necessary text for the translation.
開発者のポテンシャルの最大化 - より時間の節約になるツールが必要です 頻繁に見過ごされたり、滅多に議論されないテーマに興味があります。クールなテクノロジーが使用されていることがよくありますが、それに関連する問題について誰も話しません。 開発は今日では非常に手間がかかるようになりました。 &ldquo;Serverless&rdquo;、&ldquo;Low Code&rdquo;、&ldquo;IaC&rdquo;、&ldquo;Big Data&rdquo;、&ldquo;Cloud&rdquo;、&ldquo;DevOps&rdquo;、&ldquo;You Build it You run it&quot;などのクールなバズワードを持っている開発者は、既に十分以上の追加業務を抱えています。そのため、タスクが増えると、専門家がほとんどいなくなり、フォーカスが何かを無視することを意味します。そのため、自動化と時間の節約は非常に重要です。 &ldquo;Don&rsquo;t make me think&quot;と&quot;Works out of the Box&quot;はすでに優れた品質の指標ですが、Gradleでは見ることができません。公正を期すために、Gradleは私たちに仕事を簡単にするのではなく、私たちを苦しめる現代のツールの唯一のものではありません。
シンプルさと自動化を求める幻想的な探求 Seit SOAP habe ich eine tief verwurzelte Abneigung gegen XML-basierte Konfigurationen.]]></description></item></channel></rss>