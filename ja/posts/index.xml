<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - &lt; 言われない ></title><link>https://novaannabella.github.io/the_unspoken/ja/posts/</link><description>All Posts | &lt; 言われない ></description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Fri, 08 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/ja/posts/" rel="self" type="application/rss+xml"/><item><title>クラウドのリスク</title><link>https://novaannabella.github.io/the_unspoken/ja/risks_of_cloud/</link><pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/risks_of_cloud/</guid><description>クラウドのリスク - なぜ二度考えるべきか 序論 クラウドに対する熱狂は見逃すことができません。 小さなスタートアップから大企業まで、みんながクラウドの柔軟性、スケーリングの可能性、そしてシンプルさを語っています。 しかし、イカロスが太陽に近づきすぎて焼けたように、考えずにクラウドへ移行する企業も危険な落とし穴を経験するかもしれません。
コストと透明性 クラウドの世界は魅力的に見えるかもしれませんが、その輝く外観の裏にはよく高いコストが隠れています。新たにクラウドに移行する企業は、請求書がどれだけ早く積み上がるかをしばしば遅すぎるまでに気付きます。 AWSを利用する多くの会社が従業員を解雇したり、給料を凍結したりするのは偶然ではありません。クラウドの柔軟性はしばしばコストの予測不可能さによって相殺されます。クラウドが非常に高価であることは明らかであり、受け入れるべきです。
テクノロジーとアーキテクチャ クラウドの広範な機能は夢のように思えますが、それは悪夢にもなり得ます。標準プロトコルの欠如は、あなたのシステムが外部または標準 の技術と容易にまたはまったく通信できないことを意味します。さらに、インフラストラクチャー、アーキテクチャ、サービスがしばしば一体化することがあり、 それは両方のレベルでの調整を必要とすることを意味します - 複雑さと頭痛のレシピです。
セキュリティリスクと透明性 クラウドプロバイダーは包括的なセキュリティメカニズムを提供していますが、クラウドはサイバー攻撃の魅力的なターゲットであり続けます。問題は、それがオンプレミスソリューションよりも安全かどうかではなく、リスクを取るかどうかです。透明性の問題もあ ります：利用と費用に対する明確な視野なしには、意味のある予算計画はほぼ不可能です。多くの隠れたコストにより、すべてのコスト計画は少なくとも2倍にする必要があります。
長期戦略とヒューマンリソース クラウドへの選択は、孤立してではなく、より広範で長期的なビジネス戦略の一部として検討されるべきです。また、技術の選択は、あなたが企業に採用する必要がある専門家の種類に、侮れない影響を与えます。
結論 クラウドは、しばしば公称される万能薬ではありません。それには真剣に考慮すべきリスクが含まれています。コストからセキュリティ、技術的制限から人事計画まで、クラウドへの決定は複雑であり、軽率に行うべきではありません。柔軟性、標準化、透明性を提供 できるKubernetesなどの代替案を考慮する価値があります。
お問い合わせ GitHubの問題.</description></item><item><title>ホラクラシー</title><link>https://novaannabella.github.io/the_unspoken/ja/holacracy_is_wrong/</link><pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/holacracy_is_wrong/</guid><description>ホラクラシー - ユートピアの背後にあるディストピア 序論 ホラクラシーは、現代の組織構造の聖杯として称賛されています。それは平坦なヒエラルキー、より多くの 従業員参加、そして素早い適応能力を約束します。しかし、それは本当に組織的な問題の汎用解であるのでしょうか、またはそれ以上のものが隠されているのでしょうか？ このブログポストでは、 ホラクラシーに対する批判的な視点を提供し、それがなぜすべての企業にとって理想的な解決策でない可能性があるのかを検討します。
チーム構造のコスト ホラクラシーでは、チームは企業内の小さな企業として機能するように構築されます。 まずは非常に有望に聞こえますが、悪魔は細部に宿っています。チームは多くの役割を担う必要があり、 その結果、チームの規模と人件費が指数関数的に増加します。力を結集し、 共通の目標に集中するのが難しくなります。さらに、多くの異なる役割間の調整は大きな 挑戦をもたらします。最終的な結果は非効率的なチームと高い人件費で、これは間違いなく持続可能な ビジネスモデルではありません。
従業員に対する課題 ホラクラシーは、従業員に高い自己組織化と自己責任を求めます。しかし、すべてがそれに対応できる、またはそれができるわけではない場合はどうでしょうか？そして、従業員のスキルアップについてはどうでしょうか？多くの場合、彼らはチーム内で自分の役割だ けを持っていて、最適な開発経路から外れるリスクがあります。さらに、従業員は多様な役割ではなく、自分の主要な位置でのみ支払われることが多く、責任と報酬の間に食い違いが生じる可能性があります。
官僚制度のモンスター 皮肉なことに、機動性と柔軟性を目指すホラクラシーは、逆に更なる官僚制を引き起こす可能性があります。なぜなら、各チームと従業員は多くのルールと責任を理解しなければならないからです。これら新たな官僚制の層は会社のスピードを遅くし、ホラクラシーの 本来の目的に反する可能性があります。ホラクラシーは日常にさらにミーティングを追加することさえあります。
社会的な一貫性の損失 ホラクラシーのフラットな階層構造と分散型の構造は、パラドックス的に&amp;rsquo;隠れた階層&amp;rsquo;を生み出す可能性があります。社会的な複雑さが生じ、これが誤解や対立を引き起こす可能性があります。コミュニケーションの明確なラインがなく、これがチームや個人に孤独 感を感じさせる可能性があります。
結論 ホラクラシーは一律のレシピではなく、確実にすべての企業、すべてのチーム、すべての 従業員には適していません。理論的な利点が魅力的に聞こえる一方で、実際の適用では 多くの課題やデメリットが生じます。したがって、企業はこの 組織モデルが自社の文化、目標、そして何よりも従業員に合っているかどうかを非常に慎重に検討すべきです。 従業員がすでに参加できている場合、ホラクラシーは必要ありません しかし、従業員が参加できない場合、ホラクラシーも何も救えないかもしれません。
連絡先 GitHubの問題.</description></item><item><title>テストエベネン：正しいバランスを見つける</title><link>https://novaannabella.github.io/the_unspoken/ja/test_level/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/test_level/</guid><description>テストレベル：適切なバランスを見つける 序論 テストのテーマは、今日までにまだ新たな領域で、解釈に多くの自由な空間を提供しています。伝統的な テストピラミッドは問い直され、新たなテストピラミッドが生まれました。私の考えでは、必要なのは テストピラミッドではなく、何をテストするべきかについて明確な理解であると言えます。下位レベルのテストはしばしば あまり意味を成さない。焦点は主に振る舞いのテストに置かれるべきで、確認するために API またはUIが意図した通りに動作するようです。可能なテストタイプの包括的な概観はここで見つけることができます: Martinfowler Testing.
レベル1 - モックテスト＆単体テスト 目標：アプリケーション内の最小限のテスト可能なソフトウェア部品を実行し、それらが期待通りに機能するか確認する。 モックテストとユニットテストは逆効果であり、開発プロセスを頻繁に妨げる可能性があります。これらのテストはしばしばコンテクストか ら切り離され、現実に対する関連性が少ないものです。それらは、既存のユニットテストを通じて不要な機能を維持するためだけに使われることがよくあります。モックが追加されると、それは自己満足になります。モックテストの期待される結果は、元のモックで定 義されたものに限定されます。エンドユーザーは内部機能に興味がありません。例えば、ログインシナリオのloginUser(name, password, securityAlgorithmus)で、ユニットテストがsecurityAlgo rithmパラメーターに対するnullチェックを行うと、ユーザーはsecurityAlgorithmパラメーターを設定できないため、テストが過度に行われることになります。
レベル2 - インテグレーションテスト 目的：コンポーネント間の通信路と相互作用を検査し、インターフェースの欠陥を検出する。 統合テストは、アプリケーションの各部分の性能と独立性について貴重な洞察を提供します。モックが少ないほど、テストは理解しやすくなります。しかし、なお、テス トにはコンテキストが欠けており、統合テストがただのユニットテストにすぎない、モックの少ないバージョンである可能性があります。
レベル3 - コンポーネントテスト 目的：テスト対象のソフトウェアの範囲を検証対象のシステムの一部に制限し、システムを内部コードインターフェースを介して操作し、テストダブルを使用してテスト対象のコードを他のコンポーネントから隔離します。 コンポーネントテストは、アプリケーシ ョンの品質と性能について多くの情報を提供します。モックをテストする代わりに、あなたはついにあなたのアプリケーションをテストします。コンポーネントテストとエンドツーエンドテストの間の境界はそれほど重要ではありません。良好なテスト環境では、それ らの間の境界がしばしばぼやけて、実際の挙動を隔離された無関係な機能の代わりにテストすることが可能になります。しかし、追加のテストクラス(コンポーネントスタブ、フェイク、モックなど)を製品コードに作成することで、追加のメンテナンス作業が発生す る可能性があります。
レベル4 - 契約テスト このコードブロックの目的は、外部サービスの境界でのインタラクションをチェックし、それが消費者サービスの契約要求を満たしていることを確認することです。
契約テストはよくコンポーネントテストに似ており、彼らの間にはわずかな違いしかありません。いくつかの開発者はこれらのテストをPactテストと関連付け、それは基本的にサーバーが介在する単体テストとして機能します。しかし、これらのテストを維持するコストはそれだけの価値がないかもしれません。例えば、PactテストはREST-API loginUser?name=aa&amp;amp;password=bb)をテストし、前にPactサーバーにアップロードされたJSONスキーマ応答を期待することができます。このスキーマは静的であり、APIの応答で誤った日付形式やタイムゾーンなどのエラーに対して脆弱である可能性があります。その影響は大きいかもしれません。
レベル5 - エンドツーエンドテスト（別名ブラックボックステスト） 目的：システムが外部要件を満たし、目標を達成しているかを確認するために、システム全体を 始めから終わりまでテストする。 エンドツーエンドテストは信頼性があり、堅牢です。テスト環境の構築の課題を克服すると、その 努力は報われます。これらのテストは実際の動作をシミュレートし、モックの必要性を排除します。エラーはめったに 発生せず、ローカルでの再現も容易になります。手間のかかるデバッグや本番環境でのログの取得 が大幅に減少し、稀な事件も同様に減少します。開発者はまれに、もしある場合でも、実データを扱うことはありませんが、 これにより責任が軽減され、焦点が高まります。さらに、自動ソフトウェアアップデートのような自動化が、 行動が既にテストされたという事実を考慮に入れて実施を容易にします。他にも利点があります！ テストが 再利用可能な形式で書かれていれば、負荷テストに統合することができ、機能の全体像を得ることができます。これらのテストはまた、常時本番環境で 実行され、各種ワークフローの状況に対するリアルタイムの洞察を提供します。部分システム、例えば 外部のRESTサービスがオフラインになると、影響を受けるユーザワークフローがすぐに特定できます。
結論 要約すると、テストはソフトウェア開発の重要な側面であり、テストレベルの選択はアプリケーションの具体的な要求と目標に依存します。モックテストやユニットテストはその効果が限定的であるかもしれませんが、インテグレーションテストとコンポーネントテス トでは、アプリケーションの振る舞いやパフォーマンスについて価値ある洞察を提供します。コントラクトテストは外部サービスとの交互作用を確認するのに役立ちますが、それとコンポーネントテストとの区別は最小限になるかもしれません。最終的に、エンドツー エンドテストはシステムの機能に対する最大限の信頼を提供し、アプリケーション全体の包括的なテストを可能にします。適切なテストレベルを選択し、それらを効果的に組み合わせることにより、開発者はソフトウェアの品質、信頼性、強靭性を保証することができ ます。
連絡先 GitHubの問題。</description></item><item><title>AI ハイプ</title><link>https://novaannabella.github.io/the_unspoken/ja/ai_behind_the_hype/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/ai_behind_the_hype/</guid><description>実世界におけるKI - ハイプを超えて考える 紹介 人工知能（AI）の使用について言えば、煩わしいほどの大騒ぎや期待があります。 一部の人々は、AIが労働環境を革命化し、人間の能力を不要にすると信じています。しかし、頭からAIの世界に飛び込む前に、 私たちはいくつかの重要なポイントを考慮する必要があります。AIは間違いなく進歩を遂げていますが、それは新しいものではなく、 理解しなければならない重要な限界もあります。ネタバレ：AIはただの別のツールです。例えば、ターミネーターのような映画のようなシーンからはまだ遠く離れています。 現在のAI、例えばChatGPTも、ソフトウェアがどのように設計されるべきかの良い例です！サービス指向であり、 スイスの万能ナイフ、つまり全ての問題の解決策ではない。
いくつか挑発的な質問：
AIが新しいものであるとか、自分の仕事を奪うものだと考えている全てのコンピュータサイエンティストは、自分の視野や専門知識についてもっと考えるべきではないのでしょうか？ AIモデルへと移行しているデータサイエンティストの従業員：なぜあなたの特定のAIモデルは、大手のなんでもできる言語モデルよりも劣っていますか？何をしていたのですか、そして、自分のユースケースに特化した同等のモデルを作成するために何が足りませんか？ 境界の理解 GPTを含むKIモデルは、既存のデータとパターンを基に訓練されます。彼らはパターンを認識し、その訓練に基づいて内容を生成するのが得意ですが、実際の理解や訓練を超えた考え方の能力はありません。この限界を認識することは、現実的な期待値を設定するのに役立ちます。存在しなかったものは存在しないでしょう。質の高い、秘密の、そして安全な情報は少数派です。ジュニアの数はシニアよりも常に多いでしょう。したがって、KIは常にlow-levelの&amp;quot;Hello World&amp;quot;例のためだけに機能します。例えば、仕事を失うことを恐れるプログラマーなど、多くの分野で、彼らは自分の仕事の品質について真剣に考えるべきです。
AI開発のコストと計算能力の重要性 AIの開発は、ハードウェアの着実な進化が大いに推進しています。GPT-3.5のようなAIモデルは、複雑なタスクを処理するために膨大な計算能力を必要とします。AIのコストは、高性能なGPUやTPUなどの必要なハードウェアに密接に関連しています。さらに、インフラの運用と維持のための定期的なコストが発生します。増大する計算能力はAIの利用可能性を高めていますが、それでもかなりの投資が依然として必要です。コスト最適化と効率的なリソース管理は、AIプロジェクトの経済的な成功を確保するために重要です。そのため、AIの実装に際しては、適切なコスト分析と計画が不可欠です。
人間の知能の補完 AIは人間の知能を置き換えるのではなく、補完するツールと見なすべきです。人間の判断力、批判的思考、創造性は不可欠です。AIは貴重な洞察を提供し、繰り返しのタスクを自動化し、生産性を向上させることができますが、重要な決定をするためだけには用いるべきではありません。あなた自身の関与がなければ、AIはすべての必要な側面を考慮に入れることはできません。 コンピュータサイエンスでは、AIは自発的にレジリエンス、セキュリティ、コンプライアンス、データプライバシー、可読性、パフォーマンス、シンプルさ、パターン、時宜を得たものなどのテーマを考えません。 例えば、AI 3Dモデリング：AlexがBlenderでAIをテスト （見た目は良いですが、例にすぎません） 私のAIコード生成に関する経験は一言で: 笑止千万！そのようなコードを書く開発者は、私だったら採用したくありません。しかし、私はスパーリングパートナーとしてAIを利用しています、まるで自己反省のように。 AIの最も効果的な利用は、人間とAIシステムの協働によってよく達成されます。AIはアイデアの生成、問題解決、特定のタスクの自動化に役立つかもしれませんが、結果を精査、改善、最適化するためには、人間の監督と介入が不可欠です。
検証とテスト AIによって生成された結果は、常に徹底的に検証し、テストする必要があります。それがコード、内容、または他の 出力であるかどうか、人間による監視が品質、正確さ、そして生成された 結果の準拠を保証するために必要です。検証プロセスは、不正確または誤解を招く 結果に依存しないために重要です。別のAIによってAIを検証しないでください。それはまるで私がクラスのテストを 自分で修正するのではなく、生徒に修正させるようなものです。
継続的な学習と適応 KIモデルは、変化する状況に適応するために、継続的に更新され、洗練される必要があります。 フィードバックループと反復的な改善が必要で、それによって KIが生成する結果の正確さ、関連性、有用性を確保します。KIの学習プロセスは決して止まりません。
実際の問題への焦点を合わせる KIは実際の問題に対処し、人々に価値を提供するために使用されるべきです。 KIをただ自分自身のためだけに使用することは重要ではありません。 明確な目標、問題の特定、関係者への影響の理解が、KIソリューションに関しては決定的な要素です。
結論 人工知能は間違いなく強力なツールですが、その限界を理解し、責任ある姿勢で使うことが重要です。AIは人間の知能を補完することはできません。人間の判断力、創造性、批判的思考は不可欠なままです。慎重な 検証、考察、および人間とAIの協力により、最良の結果を得ることができます。AIの強みを活用して実際の問題を解決し、世界を改善しましょう。
連絡先 GitHubの問題.</description></item><item><title>イリュージョン サーバーレス &amp; クラウド</title><link>https://novaannabella.github.io/the_unspoken/ja/illusion_serverless_cloud/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/illusion_serverless_cloud/</guid><description><![CDATA[サーバーレス関数のクラウド内でのイリュージョン 序論 私は、マーケティングが如何に頻繁に健全な判断を勝つのかに失望しています。多くのマネージャーは自分自身の専門家である開発者を無視します。これはクラウドへの移行にも当てはまります。ネタバレ：お金を節約しなければならない人は、クラウドを避けるべきです。なぜなら新しいバズワードの&quot;サーバーレス&quot;はクラウド上で次の意味を持ちます：あなたがソフトウェアの面倒を見、私たちがハードウェアの管理をします。しかし、あなたが有能で、モチベーションがあり、好奇心旺盛な管理者を持っていれば、「サーバーレス」も自分で運用することができます（例えば、KNative）。
サーバーレス関数 vs マイクロサービス: マイクロサービス 典型的なステートレスマイクロサービスは特定の機能/ドメインを担当し、コンテナのオーケストレーション環境で提供されます。この環境は、インフラ、セキュリティ、ファイアウォール、ログ、メトリクス、シークレット、ネットワーク、バックアップなど多くの ことを管理します。大きな利点は、マイクロサービスがローカルで少ないリソースで統合テストが可能であり、クラウド/サーバーに依存しない（どこでも利用可能）であることです。
サーバーレス関数 事前に小さな冗談：パラドックスですが、真実です-サーバーレス機能は大いにサーバー環境に依存しています。 :) 典型的なサーバーレス機能もまた特定の機能/ドメインのみを処理し、フレームワークなしで 純粋なコードで書かれることで、マイクロサービスよりも高速になることを目指しています（これもマイクロサービスにとっての良いエクササイズ）。大きい 利点は、サーバーレス機能が自動的にスケーリングされることです。ただし、各サーバーレス機能には セキュリティ、ファイヤーウォール、ネットワーク、ログ、メトリクス、 シークレット、キャッシング、バックアップなど、インフラを定義するための大量のGlueCodeが必要です。 そのため、APIを含むファイルのコピーなどの簡単な機能でも、コード（IaCを含む）がすぐに1500行にもなることがあります。 管理コストは、管理から開発へと1:N（1からサーバーレスまで） 機能）。知識と実装はこれにより 集約されていなく、すぐに不安定になる可能性があります。さらに、維持費が増加します。 また、サーバーレスの統合テストは稀で、または大変な労力をかけて行われることがあります。 結局のところ、サーバーレス機能の複雑さは個々のマイクロサービスよりも明らかに高いです。 複雑さが増すと、保守性も低くなります。新しいチームメンバーにとっては困難で、明らかに より多くの知識が必要です。
サーバーレスと一般的なクラウド ほとんどのクラウド技術は最新のものではありません。たとえば、Node.js、Java、Pythonなどの言語や技術は、更新が困難で、ほとんど待つしかありません。 また、MongoDB、MySQL、Kafka、NATS、RabbitMQ、Redis、Prometheus、InfluxDB、Grafana、 Kibana、Elastic Searchなどの現代的で標準的な技術は、利用できないか、費用がかかりすぎます。 これらのスタンダードサービスがない場合、しばしば仮想的な石器時代になり、古くなったソリューション、たとえば 外部へのコミュニケーションにWebhooksを使用します。さらに、規制、 コンプライアンス、データプライバシー、信頼性についての裁量が大幅に制限されます。
したがって、クラウドは、AWS、Azure、Google、On-Premiseなど、すばやく コストを比較したり切り替えたりできるように、アプリカジョンに依存しない形で運用されるべきです。 クラウドでも制限があり、それが創造的な回避策につながり、複雑さを増したりします。また、包括的なテストもコストがかかります。なぜなら、各開発者がクラウドで自己の開発環境を 必要とする一方、多くのクラウドサービスはほとんどまたはまったくローカルでテストできないからです。 しかしながら、テストがない状態でもクラウドは高い。オンプレミスシステムでは主に ハードウェアコストが発生しますが、クラウドではさらにトラフィック、いくつかのスタンダードサービス、そしてしばしば 二重課税のための追加の支払いが必要です。おまけに、クラウドでは簡単に全体像を見失います。なぜなら、それがユーザーフレンドリーさではなく コストについて扱われているからです。コストはそんなに隠されていて、それに気づくのは遅すぎる時です。
クラウドと特にサーバーレスの領域で、アーキテクチャとインフラの基礎は 新たに発明されなければなりません。なぜなら、その実装は利用できる機能に大きく依存するからです。 アーキテクチャを設計した後に思うことはいつもこれです：&ldquo;それは一つのサービスでよかっただろう&rdquo;。
私にとって、サーバーレスは興味深い考え方であり、スケールするのが容易ですが、コストを下げるものではありません。むしろ、それは開発においてもっと多くの知識と時間を必要とします。サーバーレスやクラウドは規律と前知識が必要です。 もしオンプレミスシステムに対する知識がなければ、クラウドを使うことで簡単にはならないでしょう。 開発者はどのようにしてインフラストラクチャの知識を追加で身につけることができるのでしょうか？
私は、クラウドアーキテクチャよりも、適切に管理されたKubernetesクラスタを選びます。 スタッフはスケーリングしません。多くの開発者はコードを書くための規律がありません。 残念ながら、これは開発者の80%に当てはまります。どのようにして、これらの開発者がクラウドを操作できるようにするのでしょうか？
組織がサーバーレスアーキテクチャとクラウドの課題と影響を全面的に理解することは重要です。これには、技術的な知識だけでなく、戦略的なアプローチも必要です。軽率なクラウドへの移行は複雑さ、高いコスト、開発者の過負荷に繋がる可能性があります。
要約すると、クラウド上のサーバーレスは有望なコンセプトではありますが、慎重に考慮すべきです。コスト、複雑さ、維持可能性、開発チームの能力を考慮する必要があります。 すべての会社には異なる要求と優先順位があります。クラウド上のサーバーレスが最適な解決策であるか、それとも他のアプローチ 例えば、適切なKubernetesクラスタがより良い選択であるかどうか、考え抜いた決定を下すべきです。
サーバーレスとクラウドコンピューティングの成功は、技術的な専門知識と 戦略的な計画、ビジネス要件の明確な理解の組み合わせに依存します。そのみなさんがサーバーレスの幻想を 見透かし、自社のソフトウェア開発に最適な決断を下すことができます。
結論 クラウドでのサーバーレス関数の導入は、柔軟性、スケーラビリティ、およびエンジニアの インフラストラクチャタスクからの解放を約束します。しかし、この幻想には惑わされてはならない。クラウドへの 移行とサーバーレス関数の使用は、多くの課題をもたらします。 開発者は、実際の開発以外に新しい「言語」を学習し、適切なサポートがない場合は 更なる責任を負う必要があります。 サーバーレス関数の複雑さは、開発者がインフラストラクチャ定義、セキュリティ、スケーリングなど、多くの追加 タスクを引き受ける必要があるため、マイクロサービスよりも高いことが多い。真の統合テストは 困難で、運用のための先行知識と経験はクラウドでさらに重要となります。 クラウド自体もさらなる課題をもたらします。多くのクラウド技術は最新のものでは ありませんし、最新の標準サービスを利用することは高価であったり、不可能であったりする場合があります。規制要件、コンプライアンス、および データプライバシーは遊びの幅を制限します。また、クラウドのコストは容易にコントロールを失い、 支出の全体像をすぐに見失うことがあります。 全体として、サーバーレスとクラウドの利点と欠点を慎重に比較検討する必要があります。 企業は、特定の要件、チームの既存のノウハウ、クラウドへの移行の長期的な影響を 考慮するべきです。 包括的な分析に基づいた明確な意思決定は、プロジェクトの成功と収益性にとって非常に重要です。 最終的には、企業には、開発者を適切にサポートし、クラウドのコストと複雑性を現実的に評価し、よく管理されたKubernetesクラスターなどの代替ソリューションを検討する責任があります。 明確な戦略と自社のニーズに対する深い理解を持つことで、企業はクラウドとサーバーレス機能の利点を最大限に活用し、幻想を見抜くことができます。]]></description></item><item><title>Mavenに戻る?</title><link>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/ja/back_to_maven/</guid><description><![CDATA[Mavenに戻る？ 10年間のGradle。安堵の探求とMavenの強さの再発見への短い旅。 開発者のポテンシャルの最大化 - 私たちはもっと時間節約ツールが必要です 私が興味を持つのは、よく見落とされたり、あまり議論されないテーマです。素晴らしいテクノロジーが使われていることが多いのですが、それに伴う問題についてはほとんど語られません。 開発は今日では非常に手間がかかるようになりました。 &ldquo;Serverless&rdquo;、&ldquo;Low Code&rdquo;、&ldquo;IaC&rdquo;、&ldquo;Big Data&rdquo;、&ldquo;Cloud&rdquo;、&ldquo;DevOps&rdquo;、&ldquo;You Build it You run it&quot;など、カッコいいバズワードが溢れており、開発者は既に余裕以上の付加的な課題に直面しています。タスクが増えると、専門家がほとんどいなくなり、何かが焦点を失うことが常にあります。それゆえ、自動化と時間節約は非常に重要です。”Don’t make me think”や&quot;Works out of the Box&quot;などの品質指標は、私がまだGradleで見ていないものです。公平を期すために、Gradleは私たちに作業を増やすだけの現代的なツールだけではありません。
簡易性と自動化への幻影的な追求 SOAP以来、私はXMLベースの設定に対して深い嫌悪感を抱いています。Gradleを使用することで、バインドスクリプトの作成が簡単になることを期待していましたが、 残念ながら、私の期待とモチベーションは次第に低下していきました。Gradleは柔軟性を追求しており、そのために自動化と品質を犠牲にしています。開発者たちは ソフトウェアの信頼性に影響を与えることなくトレンドに盲目的に追従しています。Grad leビルドスクリプトをシンプルでメンテナンスが容易に保つためには、強い規律が求められます。そのような規律はソースコード中にはめったに見つけられず、そのためビルドスクリプト中でもそれはさらに稀です。
翻訳と回避策 - ビルドスクリプトが挑戦になるとき GradleはバックグラウンドでMavenとあまり変わらない方法で動作します。したがって、いくつかの翻訳が必要です。Dependency Catalog、Maven Release Plugin、Dependabotなどの機能は、基本的にはMavenがすでに備えている基本機能のワークアラウンドです。 Gradleの柔軟性により、しばしば複雑なビルド設定が生じ、維持が難しくなります。 Gradleプラグインは、互換性の問 題、制限、または限定的な開発が頻繁に発生します。これらの問題は、Gradleエコシステムの進化する性質、Gradleが使用されるさまざまな環境、および各プラグインの特定の実装と保守の労力のために生じます。全ては相互に関連しています。
Gradleのドミノ効果 - 実世界での悪夢のシナリオ 私は数年しか経っていないマイクロサービスをたくさん見てきましたが、既にGradleのせいで保守できなくなっていました。 これが初めてのことだと言うことは重要であり、いえ、それらはジュニアデブではありませんでした。
私の任務は、Spring Boot 2.xを2.7にアップグレードすることでした。ネタバレ：私は一年後に諦めました！問題は簡単に言うと：
Gradleビルドファイルが必要 -&gt; 私のローカルJavaバージョンを11にダウングレード（WTF）（通常Javaは下位互換性がある ここでもSdkManのような回避ツールがあります&hellip;） Spring Bootアップデートが必要 -&gt; Gradleアップデート（WTF） Gradleアップデートが必要 -&gt; プラグインアップデート プラグインアップデートが必要 -&gt; Groovyアップデート（WTF） Groovyアップデートが必要 -&gt; テストフレームワークとテストのアップデート（WTF） テストフレームワークアップデートが必要 -&gt; 依存性のアップデート [&hellip;] さらに、一部のプラグインは新しいGradleバージョンとは互換性がなく、一部は開発が中止され、他のプラグインと互換性がない、Gradle KTSだけでなくGradle Groovyでも機能する、あるいは単純にリミットがあります。 Springのような大手供給業者のプラグインでも、Mavenプラグインと比較して機能が制限されています。結果的に、誰も正しくメンテナンスできないクールな短いGradleビルドファイルが手に入りました。デベロッパーでさえも、それを書いた人たちはまだGradleを愛しています。私が知っているのは、Gradleのスクリプトを真剣に理解하たり書くことができる人はわずかしかいません。 Mavenの力の再発見 - Mavenの魔法の力を利用する これが私のお気に入りのMavenの機能です： プラグインは、定義することなく直接コマンドラインから起動、設定することができます。プラス他のプラグイン構成から大きく独立しています。]]></description></item></channel></rss>