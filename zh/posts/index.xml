<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - &lt; 未言之事 ></title><link>/zh/posts/</link><description>All Posts | &lt; 未言之事 ></description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Mon, 01 May 2023 01:01:01 +0000</lastBuildDate><atom:link href="/zh/posts/" rel="self" type="application/rss+xml"/><item><title>回归 Maven？</title><link>/zh/back_to_maven/</link><pubDate>Mon, 01 May 2023 01:01:01 +0000</pubDate><author>Nova Annabella</author><guid>/zh/back_to_maven/</guid><description><![CDATA[回归 Maven？ Gradle 十年：对简单性的艰难追求和重新发现 Maven 强大之旅。 最大化开发者潜力 我们需要更多的省时工具 往往被忽视或很少讨论的主题引起了我的兴趣。通常有很酷的技术在使用，但几乎没有人谈论与之相关的问题。 在当今，开发变得非常耗时。 以“无服务器”、“低代码”、“基础设施即代码”、“大数据”、“云”、“DevOps”、“You Build it You run it” 等酷炫词汇， 开发者已经有了足够多的额外任务要处理。更多任务意味着几乎没有专家剩下，而且总有一些事情被忽视。因此，自动化和节省时间非常重要。 &ldquo;不让我思考&rdquo; 和 &ldquo;开箱即用&rdquo; 已经是好的质量特性，但我在 Gradle 中还没有看到它们。公平地说，Gradle 并不是唯一一个让我们的工作变得更艰难而不是更容易的现代工具。
看似简单和自动化的追求 从 SOAP 开始，我对基于 XML 的配置有一种根深蒂固的厌恶感。我曾希望使用 Gradle 编写构建脚本会轻而易举。然而，每一次都让我对希望和动力失去信心。Gradle 追求灵活性，为此牺牲了自动化和质量。开发人员盲目追随潮流，不顾对软件可靠性的影响。要保持 Gradle 构建脚本简单且易维护，需要强大的纪律性。这种纪律性在源代码中已经很少见，因此在构建脚本中更是少之又少。
翻译和解决方案 当构建脚本成为纪律的挑战 Gradle 在后台的工作方式与 Maven 并没有太大区别。因此，需要进行一些翻译。诸如依赖目录、Maven Release 插件、Dependabot 等功能实际上是对 Maven 已经具备的基本功能的变通方法。由于 Gradle 的灵活性，构建配置通常会变得复杂且难以维护。 由于一切都彼此相互关联，Gradle 插件经常存在兼容性问题、限制或有限的进展。这些问题可能源于 Gradle 生态系统的不断发展，Gradle 部署环境的多样性，以及每个插件所需的特定实施和维护工作。
Gradle的多米诺效应 真实世界的噩梦场景 我见过很多只有2年历史的微服务，由于Gradle的原因已经无法继续维护。 值得一提的是，这不是我第一次见到这种情况，而且不是由初级开发人员造成的。
所以，我的任务是进行Spring Boot 2.5到2.7的升级。剧透：我在一年后放弃了！简述问题如下：
Gradle构建文件需要 -&gt; 将我的本地Java降级到11（什么鬼）（Java通常是向下兼容的 - 还有一些像SdkMan这样的解决工具&hellip;） Spring Boot升级需要 -&gt; Gradle升级（什么鬼） Gradle升级需要 -&gt; 插件升级 插件升级需要 -&gt; Groovy升级（什么鬼） Groovy升级需要 -&gt; 测试框架和测试更新（什么鬼） 测试框架更新需要 -&gt; 依赖项更新 [&hellip;] 此外，一些插件不适用于较新的Gradle版本，一些插件不再维护，与其他插件不兼容，仅适用于Gradle KTS而不是Gradle Groovy，或者存在错误。即使是像Spring插件这样的大公司的插件，与它们的Maven插件相比，功能也有限。 最后，我有一个很酷的简短的Gradle构建文件，没有人能够维护它，甚至连编写它的开发人员也不能，但他们仍然热爱Gradle。 重新发现Maven的力量 发挥Maven的魔力 以下是我最喜欢的Maven功能： 插件可以从命令行启动和配置，无需定义，并且与其他插件配置高度独立。]]></description></item></channel></rss>