<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - &lt; 未言之事 ></title><link>https://novaannabella.github.io/the_unspoken/zh/posts/</link><description>All Posts | &lt; 未言之事 ></description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Wed, 31 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/zh/posts/" rel="self" type="application/rss+xml"/><item><title>测试水平：寻找正确的平衡</title><link>https://novaannabella.github.io/the_unspoken/zh/test_level/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/test_level/</guid><description><![CDATA[测试水平：寻找正确的平衡 [！testebenen](https://martinfowler.com/articles/microservice-testing/)
###简介
测试的话题似乎仍然是一个未知的领域，有很多解释的空间。传统的 测试金字塔受到了质疑，新的测试金字塔已经出现了。在我看来，没有必要建立一个 测试金字塔，而是要清楚地了解需要测试的内容。较低层次的测试往往 意义不大。重点应该主要放在测试行为上，以确保 API 或用户界面能如期工作。关于可能的测试类型的全面概述可以在这里找到： Martinfowler Testing。
1级 - 模拟测试和单元测试 目标：锻炼应用程序中最小的可测试软件部分，看它们是否按预期工作。 工作。 模拟测试和单元测试可能会适得其反，往往会阻碍开发过程。这些测试通常是 脱离了上下文，与现实没有什么关系。他们往往只是通过现有的单元测试来维护不必要的功能。 单元测试。一旦加入模拟测试，就会变成一种自我否定的做法。预期的 模拟测试的预期结果被限制在原始模拟中定义的内容。终端用户 对内部函数不感兴趣。例如，在一个 登录场景中loginUser(name, password, securityAlgorithm)。如果单元测试对 如果单元测试对 &ldquo;securityAlgorithm &ldquo;参数进行空检查，就会完成过多的测试，因为用户不能设置 &ldquo;securityAlgorithm &ldquo;参数。 设置 &ldquo;securityAlgorithm &ldquo;参数。
2级&ndash;集成测试 目的：检查组件之间的通信路径和相互作用，以发现 接口缺陷。 集成测试为应用程序的不同部分的性能和独立性提供了有价值的见解。 应用。有了更少的模拟，测试变得更容易理解。然而，他们仍然缺乏上下文，而且有一种风险，即 危险，即集成测试只是在较少的模拟中变相的单元测试。
3级&ndash;内容测试 目的：将被测软件的范围限制在被测系统的一部分，通过内部代码接口来操纵系统 通过内部代码接口和使用测试替身将被测代码与其他组件隔离。 组件。 组件测试提供了大量关于应用程序的质量和性能的信息。而不是 mocks，你最终测试你的应用程序。组件测试和端到端测试之间的界限并不 显著。有了一个好的测试环境，它们之间的界限往往变得模糊，因此，测试真正的 行为，而不是孤立的和无背景的功能。然而，创建额外的 然而，在生产代码中创建额外的测试类，如组件存根、赝品和模拟，会增加维护开销。
4级&ndash;合同测试 这个代码块的目的是检查外部服务的边界上的交互，并确保它符合消费服务的合同要求。 确保它符合消费服务的合同要求。 契约测试通常类似于单元测试，它们之间的区别很小。一些开发者 将这些测试与Pact测试联系在一起，Pact测试本质上是单元测试，中间有一个服务器。维护这些测试的努力 然而，维护这些测试的努力可能是不值得的。例如，一个Pact测试可以使用 REST API loginUser?name=aa&amp;password=bb)，并期待一个先前上传到Pact服务器的JSON模式响应。 服务器。这种模式是静态的，容易出现错误，如日期格式不正确或时区在 API响应。其负面影响可能是巨大的。
###第五级&ndash;端到端测试（也叫黑盒测试）。
目的：通过对整个系统从头到尾的测试，验证一个系统是否符合外部要求并实现了其目标。 从头到尾。 端到端测试是可靠的和强大的。一旦建立测试环境的障碍被克服，努力就会得到回报。 努力得到了回报。这些测试模拟了真实的行为，消除了对模拟的需要。错误发生的频率较低 并且更容易在本地重现。在生产中耗费时间的调试和记录在很大程度上被避免了，因为不经常发生的错误也被避免了。 在很大程度上，我们可以避免出现罕见的事件。开发人员更少地与生产数据打交道，即使有也是如此。 如果有的话，开发人员也不会经常与生产数据打交道，这就减少了责任，提高了注意力。此外，自动化，如 自动软件更新使实施更容易，因为行为已经被测试过了。还有其他的好处!一旦 一旦测试被写成可重复使用的形式，它们可以被集成到负载测试中，以获得一个全面的 功能的全面情况。这些测试也可以在生产环境中连续运行 并提供对各种工作流程状态的实时了解。当一个子系统，如 例如，REST服务离线时，可以立即确定哪些用户工作流受到影响。 是受影响的。]]></description></item><item><title>人工智能的炒作</title><link>https://novaannabella.github.io/the_unspoken/zh/ai_behind_the_hype/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/ai_behind_the_hype/</guid><description><![CDATA[#现实世界中的人工智能&ndash;超越炒作的思考
[！ai_ml](https://en.wikipedia.org/wiki/Weak_artificial_intelligence)
###简介
当谈到人工智能（AI）的使用时，有很多紧张的兴奋以及期待。 一些人认为，人工智能将彻底改变工作世界，使人类技能变得多余。但在 我们一头扎进人工智能的世界，我们应该考虑一些重要的问题。人工智能无疑已经取得了进展 但它并不新鲜，而且有很大的局限性，我们需要理解和尊重。 破坏者：人工智能只是另一种工具。我们离《终结者》等电影般的场景还有很长一段距离。 目前的人工智能，如ChatGPT，也是一个很好的例子，说明软件应该如何设计!以服务为导向，并且 而不是像瑞士军刀一样，又称万能的解决方案，只是很少有帮助或可重复使用。 几个具有挑战性的问题： * 任何认为人工智能是新事物或可以接管其工作的计算机科学家难道不应该好好想想他们的视野和专业知识吗？ 是否应该更好地思考他们的视野和专业知识？ * 受薪的数据科学家向人工智能模型转移。 正在进行转换：为什么你的特定人工智能模型不如大的一切könner语言模型？你有什么 你以前做了什么，你缺少什么来创建同样好的特定于你的用例的模型？
###了解边界
人工智能模型，包括那些基于GPT的模型，是在现有的数据和模式上训练出来的。它们 它们善于识别模式并在训练的基础上生成内容，但它们缺乏真正的 理解或超越其训练的思考能力。承认这个界限有助于、 设置现实的期望。从未存在的东西将不存在。定性、保密和安全 信息是少数。后辈总是比前辈多。因此，人工智能将只适用于 低级别的 &ldquo;Hello World &ldquo;例子。在许多领域，如程序员，他们害怕他们的工作，他们应该 认真思考他们工作的质量。
###人工智能发展的成本和计算能力的重要性
人工智能的发展在很大程度上是由硬件的不断发展所推动的。人工智能模型如 GPT-3.5需要巨大的计算能力来处理复杂的任务。人工智能的成本与所需的硬件密切相关 所需的硬件，如强大的GPU和TPU。此外，还有运营和维护基础设施的持续成本。 基础设施的维护。不断提高的计算能力增加了人工智能的可用性，但仍然需要大量投资。 巨大的投资。成本优化和有效的资源管理对于确保人工智能项目的经济成功至关重要。 人工智能项目的经济成功至关重要。因此，合理的成本分析和规划在人工智能项目中是必不可少的。 在实施人工智能时，合理的成本分析和规划是不可或缺的。
###补充人类的智慧
人工智能应被视为补充人类智慧的工具，而不是取代它。人类的 判断力、批判性思维和创造力仍然至关重要。人工智能可以提供有价值的洞察力，使重复性的工作和任务自动化，并提高生产力。 但不应该单独使用人工智能来做出重要的决定。 决定。没有你的信任，人工智能将无法纳入你所有需要的方面。 在IT领域，人工智能不会自己思考问题，例如：弹性、安全、合规、数据隐私、 可读性、性能、简单性、模式、及时性等。 人工智能3D建模实例：Alex用Blender测试人工智能 (看起来不错，但只是一个 &ldquo;你好&rdquo;。 但这只是一个 &ldquo;Hello World &ldquo;的例子) 我对人工智能代码生成的经验用一个词来形容：荒谬！我不知道该怎么说！我不会想留住那些写 我不会想留住。不过，我还是把人工智能作为一个陪练又称解释效果，像一种自我反省。 对人工智能最有效的使用往往是通过人类和人工智能系统之间的合作来实现的。人工智能可以帮助在 人工智能可以帮助产生想法，找到解决方案或使某些任务自动化，但人类的监督和干预对于完善人工智能系统至关重要。 监督和干预对于完善、改进和优化结果至关重要。
###验证和测试
人工智能生成的结果应该始终被彻底验证和测试。无论是代码、内容还是其他 输出，人类的监督是必要的，以确保生成的结果的质量、正确性和合规性。 产生的结果的质量、正确性和合规性。验证过程对于避免依赖不准确或误导性的结果至关重要。 不准确或误导性的结果。请不要用另一个人工智能来验证人工智能。这就好比我在纠正课堂测试时 不是自己纠正，而是利用我的学生。
不断学习和适应 人工智能模型需要持续更新和完善，以适应不断变化的环境。 需要反馈回路和迭代改进，以确保人工智能产生的结果的准确性、相关性和有用性。 人工智能产生的结果的准确性和实用性。人工智能的学习过程将永远不会停止。
专注于解决实际问题 人工智能应该被用来解决真正的问题，为人们创造价值。重要的是，不要为了使用人工智能 为其本身而使用人工智能。清晰的目标、问题的识别和对利益相关者的影响的理解，是人工智能解决方案的关键。 当涉及到人工智能解决方案时，对利益相关者的影响是至关重要的。]]></description></item><item><title>幻象无服务器与云</title><link>https://novaannabella.github.io/the_unspoken/zh/illusion_serverless_cloud/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/illusion_serverless_cloud/</guid><description><![CDATA[云中的无服务器功能的幻觉 ! aws_costs_twitter_1
###简介
我感到失望的是，市场营销往往战胜了常识。许多管理者把自己 凌驾于他们自己的专家&ndash;开发人员之上。这也适用于向云计算的迁移。破坏者：如果你需要省钱 需要省钱的人应该避免使用云。因为云中的新流行语 &ldquo;无服务器 &ldquo;意味着：你负责软件，我们负责硬件。 你负责软件，我们负责硬件。然而，如果你有一个有能力、有动力、有好奇心的管理员，你可以 也可以自己操作无服务器（例如KNative）。 ！aws_costs_twitter_1
###无服务器功能与微服务：
微服务 一个典型的无状态微服务负责一个特定的功能/领域，并被部署在一个 容器编排环境中。这个环境负责基础设施、安全、防火墙、日志、指标、秘密、网络、备份等、 日志、指标、秘密、网络、备份等等。一个很大的优势是，微服务可以在本地部署，只需要 少量的 资源，并且与云/服务器无关（可以部署在任何地方）。
无服务器功能 事先开个小玩笑：自相矛盾，但却是事实&ndash;无服务器功能在很大程度上依赖于服务器环境。:) 一个典型的无服务器功能也只负责一个特定的功能/领域，而且是用纯代码编写的，没有框架，比微服务更快。 编写的代码要比微服务更快（对微服务来说也是一个很好的练习）。一个很大的 一个很大的优势是，无服务器功能可以自动扩展。然而，每个无服务器功能都需要 基础设施&ndash;安全、防火墙、网络、日志、度量、 秘密、缓存、备份等等。 因此，一个简单的功能，如复制一个文件，包括API，很快就会涉及1500行代码（包括IaC）。 可以涉及到。 管理成本以1:N的比例从管理转移到开发（1到Serverless 功能）。因此，知识和实施不再是 捆绑在一起，并可能很快变得不稳定。此外，维护成本也会增加。 真正的集成测试在无服务器的情况下也很罕见，或者说只有在付出巨大努力后才能实现。 最终，无服务器功能的复杂性明显高于单个微服务的复杂性。 更高的复杂性也意味着更低的可维护性。新的团队成员的工作难度更大，需要更多的 更多的先前知识。
###无服务器和一般的云
大多数云技术都不是最新的。例如，Node.js、Java、Python和其他语言或技术是不容易更新的。 语言或技术往往不容易更新，通常只有等待才有帮助。 即使是现代标准技术，如MongoDB、MySQL、Kafka、NATS、RabbitMQ、Redis、Prometheus、InfluxDB、Grafana、 Kibana、Elastic Search等，要么没有，要么价格过高。 没有这样的标准服务，人们往往处于虚拟的石器时代，使用过时的解决方案，例如 网络钩子（webhooks）进行外部通信。此外，在监管、合规、数据保护和故障安全等问题上的回旋余地、 合规性、数据保护和故障安全等问题上的回旋余地受到严重限制。 因此，云计算应该以非静态方式运行，以便能够在AWS、Azure、Google、内部部署等之间快速切换，并比较成本。 比较成本。 限制在云中也很常见，导致创造性的变通方法，这反过来又增加了复杂性。 增加。集成测试也会变得昂贵，因为每个开发人员都需要在云端有自己的开发环境 因为许多云服务在本地几乎无法测试或根本无法测试。 但即使没有测试，云也是昂贵的。在企业内部系统中，主要是指 硬件成本，而在云计算中，你还需要支付流量、一些标准服务，甚至经常需要支付多种费用。 税，甚至经常要为多个税种付费。此外，在云中很容易失去对事物的跟踪，因为它不是关于 它不是关于用户友好性，而是关于钱。成本是如此的隐蔽，以至于你只有在为时已晚时才注意到它们。 太晚了。 架构和基础设施的基本要素必须在云中被重新发明，特别是在无服务器中。 架构和基础设施的基础知识必须被重新发明，因为实施在很大程度上取决于现有的功能。 每当我设计架构时，我都会想：&ldquo;这本来可以是一个单一的服务。 可以是&rdquo;。 对我来说，无服务器是一个有趣的想法，它的扩展性很好，但它并不能降低成本。在 相反，它在开发中需要更多的知识和时间。无服务器或云需要纪律和 经验。 如果在内部系统中没有这些知识，那么在云端也不会更容易。 开发人员应该如何获得额外的基础设施知识？ 相比云架构，我更喜欢管理良好的Kubernetes集群。 人的规模不大。许多开发人员在写代码时没有纪律。 不幸的是，80%的开发者都是如此。那么，这些开发人员如何能够运行云呢？ 的云？ 组织机构必须充分了解无服务器架构和云的挑战和影响。 充分理解无服务器架构和云计算的挑战和影响。这不仅需要技术知识，还需要战略方法。A 考虑不周的云迁移可能会导致复杂性、更高的成本和对开发人员的过度消耗。 总之，云中的无服务器是一个很有前途的概念，但也是一个应该谨慎考虑的概念。 应该慎重考虑。成本、复杂性、可维护性和开发团队的技能都需要考虑。 要考虑到。 每个公司都有不同的要求和优先事项。应该做出一个明智的决定，即是否 云中的无服务器是正确的解决方案，还是其他方法，如 例如，Kubernetes集群是更好的选择。 无服务器和云计算的成功部署需要结合技术专长 战略规划和对业务需求的清晰理解。只有这样，无服务器的幻觉才能 并为自己的软件开发做出正确的决定。]]></description></item><item><title>回到Maven？</title><link>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</guid><description><![CDATA[回到Maven？ 请注意：这是一段Markdown文本，无需翻译。
Gradle 十周年。寻求简化的途径及重新发现 Maven 的优势之旅。 将Markdown文本翻译成中文简体：\`\`\` 最大化开发者潜力 - 我们需要更多节省时间的工具 我对常常被忽略或很少讨论的主题感兴趣。通常会使用酷炫的技术，但几乎没有人谈论与之相关的问题。开发现在变得非常复杂。有了“Serverless”，“Low Code”，“IaC”，“Big Data”，“Cloud”，“DevOps”，“You Build it You run it”等酷炫的术语，开发者已经有更多的额外任务要解决。更多的任务意味着几乎没有专家，总有一些事情会被忽视。因此，自动化和时间节约是非常重要的。“Don’t make me think”和“Works out of the Box”已经是很好的质量标准，在Gradle中却看不到。公正地说，Gradle并不是唯一一个让我们更加辛苦而不是更加便利的现代工具。
虚幻的简单和自动化探索 自从了解了 SOAP，我对基于 XML 的配置深恶痛绝。我曾希望在使用 Gradle 时编写绑定脚本会很容易，但是我的希望和动力逐渐消磨。Gradle 追求灵活性，为此牺牲了自动化和质量。开发人员盲目地追随潮流，而不考虑对软件可靠性的影响。为了使 Gradle 构建脚本简单且易于维护，需要一种强烈的纪律。这种纪律在源代码中已经很少见到，因此在构建脚本中更加罕见。
翻译和解决方案 - 当构建脚本变成挑战时 Gradle与Maven在后台处理时并没有太大的不同。因此需要进行一些翻译。像Dependency Catalog、Maven Release Plugin、Dependabot和许多其他功能实际上都是对Maven已经具备的基本功能的变通方 法。在Gradle的灵活性下，通常会出现复杂的构建配置，这些配置很难维护。Gradle插件经常存在兼容性问题、限制或受到限制的发展。这些问题源于Gradle生态系统的发展性质、Gradle被应用的多样性以及每个插件的特定实现和维护工作量。一 切都相互关联。
Gradle的多米诺效应 - 真实世界中的噩梦场景 我见过许多只有几年历史的微服务，由于Gradle的原因已经无法维护。需要指出的重要一点是，这不是我第一次看到这种情况，也不是因为初级开发人员。
我的任务是升级Spring Boot 2.x到2.7。结局：经过一年的尝试，我放弃了！主要问题如下：
Gradle Build文件需要-&gt;将我的本地Java版本降级到11（WTF）（通常Java是向下兼容的-这里也有类似SdkMan的解决工具&hellip;) Spring Boot升级需要-&gt;Gradle升级（WTF） Gradle升级需要-&gt;Plugin升级 Plugin升级需要-&gt;Groovy升级（WTF） Groovy升级需要-&gt;测试框架和测试更新（WTF） 测试框架更新需要-&gt;依赖项更新 [&hellip;] 此外，一些插件与较新版本的Gradle不兼容，一些插件不再维护，与其他插件不兼容，仅与Gradle KTS而不是Gradle Groovy一起使用，或仅有限功能。即使是像Spring这样的大厂商的插件与它们的Maven插件相比也有限制功能。最终我获得了一个很酷的、简短的Gradle构建文件，但没有人能够正确维护它，甚至是编写它的开发人员，他们仍然喜爱Gradle。我只知道很少有人真正理解或编写Gradle脚本。 重新发现Maven的力量-利用Maven的魔力 以下是我最喜爱的Maven功能： 插件可以直接从命令行启动和配置，无需预先定义，而且它们在很大程度上独立于其他插件配置。
示例命令 描述 链接 mvn versions: use -latest-versions 更新版本-谁需要Dependabot？是的，我的项目多年来一直能够无需繁琐的合并请求就能轻松升级到最新版本。 https://www.]]></description></item></channel></rss>