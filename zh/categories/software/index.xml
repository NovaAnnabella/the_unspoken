<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Software - Category - &lt; 未言之事 ></title><link>https://novaannabella.github.io/the_unspoken/zh/categories/software/</link><description>Software - Category - &lt; 未言之事 ></description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Wed, 24 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/zh/categories/software/" rel="self" type="application/rss+xml"/><item><title>幻象无服务器与云</title><link>https://novaannabella.github.io/the_unspoken/zh/illusion_serverless_cloud/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/illusion_serverless_cloud/</guid><description><![CDATA[云中的无服务器功能的幻觉 ! aws_costs_twitter_1
###简介
我感到失望的是，市场营销往往战胜了常识。许多管理者把自己 凌驾于他们自己的专家&ndash;开发人员之上。这也适用于向云计算的迁移。破坏者：如果你需要省钱 需要省钱的人应该避免使用云。因为云中的新流行语 &ldquo;无服务器 &ldquo;意味着：你负责软件，我们负责硬件。 你负责软件，我们负责硬件。然而，如果你有一个有能力、有动力、有好奇心的管理员，你可以 也可以自己操作无服务器（例如KNative）。 ！aws_costs_twitter_1
###无服务器功能与微服务：
微服务 一个典型的无状态微服务负责一个特定的功能/领域，并被部署在一个 容器编排环境中。这个环境负责基础设施、安全、防火墙、日志、指标、秘密、网络、备份等、 日志、指标、秘密、网络、备份等等。一个很大的优势是，微服务可以在本地部署，只需要 少量的 资源，并且与云/服务器无关（可以部署在任何地方）。
无服务器功能 事先开个小玩笑：自相矛盾，但却是事实&ndash;无服务器功能在很大程度上依赖于服务器环境。:) 一个典型的无服务器功能也只负责一个特定的功能/领域，而且是用纯代码编写的，没有框架，比微服务更快。 编写的代码要比微服务更快（对微服务来说也是一个很好的练习）。一个很大的 一个很大的优势是，无服务器功能可以自动扩展。然而，每个无服务器功能都需要 基础设施&ndash;安全、防火墙、网络、日志、度量、 秘密、缓存、备份等等。 因此，一个简单的功能，如复制一个文件，包括API，很快就会涉及1500行代码（包括IaC）。 可以涉及到。 管理成本以1:N的比例从管理转移到开发（1到Serverless 功能）。因此，知识和实施不再是 捆绑在一起，并可能很快变得不稳定。此外，维护成本也会增加。 真正的集成测试在无服务器的情况下也很罕见，或者说只有在付出巨大努力后才能实现。 最终，无服务器功能的复杂性明显高于单个微服务的复杂性。 更高的复杂性也意味着更低的可维护性。新的团队成员的工作难度更大，需要更多的 更多的先前知识。
###无服务器和一般的云
大多数云技术都不是最新的。例如，Node.js、Java、Python和其他语言或技术是不容易更新的。 语言或技术往往不容易更新，通常只有等待才有帮助。 即使是现代标准技术，如MongoDB、MySQL、Kafka、NATS、RabbitMQ、Redis、Prometheus、InfluxDB、Grafana、 Kibana、Elastic Search等，要么没有，要么价格过高。 没有这样的标准服务，人们往往处于虚拟的石器时代，使用过时的解决方案，例如 网络钩子（webhooks）进行外部通信。此外，在监管、合规、数据保护和故障安全等问题上的回旋余地、 合规性、数据保护和故障安全等问题上的回旋余地受到严重限制。 因此，云计算应该以非静态方式运行，以便能够在AWS、Azure、Google、内部部署等之间快速切换，并比较成本。 比较成本。 限制在云中也很常见，导致创造性的变通方法，这反过来又增加了复杂性。 增加。集成测试也会变得昂贵，因为每个开发人员都需要在云端有自己的开发环境 因为许多云服务在本地几乎无法测试或根本无法测试。 但即使没有测试，云也是昂贵的。在企业内部系统中，主要是指 硬件成本，而在云计算中，你还需要支付流量、一些标准服务，甚至经常需要支付多种费用。 税，甚至经常要为多个税种付费。此外，在云中很容易失去对事物的跟踪，因为它不是关于 它不是关于用户友好性，而是关于钱。成本是如此的隐蔽，以至于你只有在为时已晚时才注意到它们。 太晚了。 架构和基础设施的基本要素必须在云中被重新发明，特别是在无服务器中。 架构和基础设施的基础知识必须被重新发明，因为实施在很大程度上取决于现有的功能。 每当我设计架构时，我都会想：&ldquo;这本来可以是一个单一的服务。 可以是&rdquo;。 对我来说，无服务器是一个有趣的想法，它的扩展性很好，但它并不能降低成本。在 相反，它在开发中需要更多的知识和时间。无服务器或云需要纪律和 经验。 如果在内部系统中没有这些知识，那么在云端也不会更容易。 开发人员应该如何获得额外的基础设施知识？ 相比云架构，我更喜欢管理良好的Kubernetes集群。 人的规模不大。许多开发人员在写代码时没有纪律。 不幸的是，80%的开发者都是如此。那么，这些开发人员如何能够运行云呢？ 的云？ 组织机构必须充分了解无服务器架构和云的挑战和影响。 充分理解无服务器架构和云计算的挑战和影响。这不仅需要技术知识，还需要战略方法。A 考虑不周的云迁移可能会导致复杂性、更高的成本和对开发人员的过度消耗。 总之，云中的无服务器是一个很有前途的概念，但也是一个应该谨慎考虑的概念。 应该慎重考虑。成本、复杂性、可维护性和开发团队的技能都需要考虑。 要考虑到。 每个公司都有不同的要求和优先事项。应该做出一个明智的决定，即是否 云中的无服务器是正确的解决方案，还是其他方法，如 例如，Kubernetes集群是更好的选择。 无服务器和云计算的成功部署需要结合技术专长 战略规划和对业务需求的清晰理解。只有这样，无服务器的幻觉才能 并为自己的软件开发做出正确的决定。]]></description></item><item><title>回到Maven？</title><link>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</guid><description><![CDATA[回到Maven？ 请注意：这是一段Markdown文本，无需翻译。
Gradle 十周年。寻求简化的途径及重新发现 Maven 的优势之旅。 将Markdown文本翻译成中文简体：\`\`\` 最大化开发者潜力 - 我们需要更多节省时间的工具 我对常常被忽略或很少讨论的主题感兴趣。通常会使用酷炫的技术，但几乎没有人谈论与之相关的问题。开发现在变得非常复杂。有了“Serverless”，“Low Code”，“IaC”，“Big Data”，“Cloud”，“DevOps”，“You Build it You run it”等酷炫的术语，开发者已经有更多的额外任务要解决。更多的任务意味着几乎没有专家，总有一些事情会被忽视。因此，自动化和时间节约是非常重要的。“Don’t make me think”和“Works out of the Box”已经是很好的质量标准，在Gradle中却看不到。公正地说，Gradle并不是唯一一个让我们更加辛苦而不是更加便利的现代工具。
虚幻的简单和自动化探索 自从了解了 SOAP，我对基于 XML 的配置深恶痛绝。我曾希望在使用 Gradle 时编写绑定脚本会很容易，但是我的希望和动力逐渐消磨。Gradle 追求灵活性，为此牺牲了自动化和质量。开发人员盲目地追随潮流，而不考虑对软件可靠性的影响。为了使 Gradle 构建脚本简单且易于维护，需要一种强烈的纪律。这种纪律在源代码中已经很少见到，因此在构建脚本中更加罕见。
翻译和解决方案 - 当构建脚本变成挑战时 Gradle与Maven在后台处理时并没有太大的不同。因此需要进行一些翻译。像Dependency Catalog、Maven Release Plugin、Dependabot和许多其他功能实际上都是对Maven已经具备的基本功能的变通方 法。在Gradle的灵活性下，通常会出现复杂的构建配置，这些配置很难维护。Gradle插件经常存在兼容性问题、限制或受到限制的发展。这些问题源于Gradle生态系统的发展性质、Gradle被应用的多样性以及每个插件的特定实现和维护工作量。一 切都相互关联。
Gradle的多米诺效应 - 真实世界中的噩梦场景 我见过许多只有几年历史的微服务，由于Gradle的原因已经无法维护。需要指出的重要一点是，这不是我第一次看到这种情况，也不是因为初级开发人员。
我的任务是升级Spring Boot 2.x到2.7。结局：经过一年的尝试，我放弃了！主要问题如下：
Gradle Build文件需要-&gt;将我的本地Java版本降级到11（WTF）（通常Java是向下兼容的-这里也有类似SdkMan的解决工具&hellip;) Spring Boot升级需要-&gt;Gradle升级（WTF） Gradle升级需要-&gt;Plugin升级 Plugin升级需要-&gt;Groovy升级（WTF） Groovy升级需要-&gt;测试框架和测试更新（WTF） 测试框架更新需要-&gt;依赖项更新 [&hellip;] 此外，一些插件与较新版本的Gradle不兼容，一些插件不再维护，与其他插件不兼容，仅与Gradle KTS而不是Gradle Groovy一起使用，或仅有限功能。即使是像Spring这样的大厂商的插件与它们的Maven插件相比也有限制功能。最终我获得了一个很酷的、简短的Gradle构建文件，但没有人能够正确维护它，甚至是编写它的开发人员，他们仍然喜爱Gradle。我只知道很少有人真正理解或编写Gradle脚本。 重新发现Maven的力量-利用Maven的魔力 以下是我最喜爱的Maven功能： 插件可以直接从命令行启动和配置，无需预先定义，而且它们在很大程度上独立于其他插件配置。
示例命令 描述 链接 mvn versions: use -latest-versions 更新版本-谁需要Dependabot？是的，我的项目多年来一直能够无需繁琐的合并请求就能轻松升级到最新版本。 https://www.]]></description></item><item><title>未说出口的话</title><link>https://novaannabella.github.io/the_unspoken/zh/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/</guid><description>欢迎来到 &amp;ldquo;The Unspoken&amp;rdquo; 自行决定什么是真实的，并决定是否远离某些主题。
我敢于挑战发展中的禁区，揭示在发展世界中的非凡事物。 同时拓展你的视野并突破你的极限。 请记住，技术应该让我们的生活和工作更轻松。
只有最勇敢的人才能真正为他人简化开发。
你上次完成的项目是什么时候呢，是实用、耐用的，并且你不再需要它？从未？那你做错了！</description></item></channel></rss>