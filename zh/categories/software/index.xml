<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Software - Category - &lt; 未言之事 ></title><link>https://novaannabella.github.io/the_unspoken/zh/categories/software/</link><description>Software - Category - &lt; 未言之事 ></description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Wed, 24 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/zh/categories/software/" rel="self" type="application/rss+xml"/><item><title>幻象无服务器与云</title><link>https://novaannabella.github.io/the_unspoken/zh/illusion_serverless_cloud/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/illusion_serverless_cloud/</guid><description><![CDATA[云中的无服务器功能的幻觉 ! aws_costs_twitter_1
###简介
我感到失望的是，市场营销往往战胜了常识。许多管理者把自己 凌驾于他们自己的专家&ndash;开发人员之上。这也适用于向云计算的迁移。破坏者：如果你需要省钱 需要省钱的人应该避免使用云。因为云中的新流行语 &ldquo;无服务器 &ldquo;意味着：你负责软件，我们负责硬件。 你负责软件，我们负责硬件。然而，如果你有一个有能力、有动力、有好奇心的管理员，你可以 也可以自己操作无服务器（例如KNative）。 ！aws_costs_twitter_1
###无服务器功能与微服务：
微服务 一个典型的无状态微服务负责一个特定的功能/领域，并被部署在一个 容器编排环境中。这个环境负责基础设施、安全、防火墙、日志、指标、秘密、网络、备份等、 日志、指标、秘密、网络、备份等等。一个很大的优势是，微服务可以在本地部署，只需要 少量的 资源，并且与云/服务器无关（可以部署在任何地方）。
无服务器功能 事先开个小玩笑：自相矛盾，但却是事实&ndash;无服务器功能在很大程度上依赖于服务器环境。:) 一个典型的无服务器功能也只负责一个特定的功能/领域，而且是用纯代码编写的，没有框架，比微服务更快。 编写的代码要比微服务更快（对微服务来说也是一个很好的练习）。一个很大的 一个很大的优势是，无服务器功能可以自动扩展。然而，每个无服务器功能都需要 基础设施&ndash;安全、防火墙、网络、日志、度量、 秘密、缓存、备份等等。 因此，一个简单的功能，如复制一个文件，包括API，很快就会涉及1500行代码（包括IaC）。 可以涉及到。 管理成本以1:N的比例从管理转移到开发（1到Serverless 功能）。因此，知识和实施不再是 捆绑在一起，并可能很快变得不稳定。此外，维护成本也会增加。 真正的集成测试在无服务器的情况下也很罕见，或者说只有在付出巨大努力后才能实现。 最终，无服务器功能的复杂性明显高于单个微服务的复杂性。 更高的复杂性也意味着更低的可维护性。新的团队成员的工作难度更大，需要更多的 更多的先前知识。
###无服务器和一般的云
大多数云技术都不是最新的。例如，Node.js、Java、Python和其他语言或技术是不容易更新的。 语言或技术往往不容易更新，通常只有等待才有帮助。 即使是现代标准技术，如MongoDB、MySQL、Kafka、NATS、RabbitMQ、Redis、Prometheus、InfluxDB、Grafana、 Kibana、Elastic Search等，要么没有，要么价格过高。 没有这样的标准服务，人们往往处于虚拟的石器时代，使用过时的解决方案，例如 网络钩子（webhooks）进行外部通信。此外，在监管、合规、数据保护和故障安全等问题上的回旋余地、 合规性、数据保护和故障安全等问题上的回旋余地受到严重限制。 因此，云计算应该以非静态方式运行，以便能够在AWS、Azure、Google、内部部署等之间快速切换，并比较成本。 比较成本。 限制在云中也很常见，导致创造性的变通方法，这反过来又增加了复杂性。 增加。集成测试也会变得昂贵，因为每个开发人员都需要在云端有自己的开发环境 因为许多云服务在本地几乎无法测试或根本无法测试。 但即使没有测试，云也是昂贵的。在企业内部系统中，主要是指 硬件成本，而在云计算中，你还需要支付流量、一些标准服务，甚至经常需要支付多种费用。 税，甚至经常要为多个税种付费。此外，在云中很容易失去对事物的跟踪，因为它不是关于 它不是关于用户友好性，而是关于钱。成本是如此的隐蔽，以至于你只有在为时已晚时才注意到它们。 太晚了。 架构和基础设施的基本要素必须在云中被重新发明，特别是在无服务器中。 架构和基础设施的基础知识必须被重新发明，因为实施在很大程度上取决于现有的功能。 每当我设计架构时，我都会想：&ldquo;这本来可以是一个单一的服务。 可以是&rdquo;。 对我来说，无服务器是一个有趣的想法，它的扩展性很好，但它并不能降低成本。在 相反，它在开发中需要更多的知识和时间。无服务器或云需要纪律和 经验。 如果在内部系统中没有这些知识，那么在云端也不会更容易。 开发人员应该如何获得额外的基础设施知识？ 相比云架构，我更喜欢管理良好的Kubernetes集群。 人的规模不大。许多开发人员在写代码时没有纪律。 不幸的是，80%的开发者都是如此。那么，这些开发人员如何能够运行云呢？ 的云？ 组织机构必须充分了解无服务器架构和云的挑战和影响。 充分理解无服务器架构和云计算的挑战和影响。这不仅需要技术知识，还需要战略方法。A 考虑不周的云迁移可能会导致复杂性、更高的成本和对开发人员的过度消耗。 总之，云中的无服务器是一个很有前途的概念，但也是一个应该谨慎考虑的概念。 应该慎重考虑。成本、复杂性、可维护性和开发团队的技能都需要考虑。 要考虑到。 每个公司都有不同的要求和优先事项。应该做出一个明智的决定，即是否 云中的无服务器是正确的解决方案，还是其他方法，如 例如，Kubernetes集群是更好的选择。 无服务器和云计算的成功部署需要结合技术专长 战略规划和对业务需求的清晰理解。只有这样，无服务器的幻觉才能 并为自己的软件开发做出正确的决定。]]></description></item><item><title>不言而喻</title><link>https://novaannabella.github.io/the_unspoken/zh/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/</guid><description>欢迎来到不言而喻的地方 **自己决定什么是对你来说是真实的，哪些话题你喜欢看开。 我敢于探索发展的禁区，揭开发展世界中的不平凡的愿望。 在发展的世界里。 同时扩大你的视野，突破你的界限。 永远记住，技术应该使我们的生活和工作更容易。 **只有我们中最勇敢的人才能真正成功地使发展为他人带来更多便利。 你最后一次完成一个几乎免于维护、强大且不再需要你的项目是什么时候？ 不再需要你？从来没有？那你就做错了!</description></item><item><title>回到玛文？</title><link>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</guid><description><![CDATA[回到Maven？ [！maven_vs_gradle](https://phauer.com/2018/moving-back-from-gradle-to-maven/)
10年的Gradle。为了寻求解脱，重新发现Maven的力量的短暂旅程。 ###最大限度地发挥开发者的潜力&ndash;我们需要更多的省时工具
那些经常被忽视或很少被讨论的话题让我感兴趣。经常有一些很酷的技术在使用、 但几乎没有人谈及与之相关的问题。 现在的开发成本已经很高了。 随着 &ldquo;无服务器&rdquo;、&ldquo;低代码&rdquo;、&ldquo;IaC&rdquo;、&ldquo;大数据&rdquo;、&ldquo;云&rdquo;、&ldquo;DevOps&rdquo;、&ldquo;你建立它你运行它 &ldquo;等很酷的流行语，开发者已经受够了。 等等，开发人员已经有足够多的额外任务要处理。更多的任务意味着，几乎没有任何 专家，而且有些事情总是被忽略的重点。这就是为什么自动化和节省时间是巨大的 重要。&ldquo;不要让我思考 &ldquo;和 &ldquo;开箱即用 &ldquo;已经是高质量的功能了，我在Gradle中还没有看到。 还看不到。公平地说，Gradle并不是唯一让我们的工作变得更容易的现代工具，而不是让它 让它变得更容易。
###对简单性和自动化的虚幻追求
从SOAP开始，我就对基于XML的配置有一种根深蒂固的厌恶。有了Gradle，我曾希望 编写绑定脚本会变得轻而易举。不幸的是，我的希望和动力每次都在减少 每次都会减少。Gradle追求的是灵活性，并为此牺牲了自动化和质量。开发人员盲目地跟随 开发人员盲目地跟风，而不考虑对软件可靠性的影响。为了使Gradle 构建脚本简单化和低维护性，需要强大的纪律性。这种纪律性在 源代码中已经很少了，因此在构建脚本中就更少了。
翻译和变通方法 - 当构建脚本成为一种挑战时 Gradle在后台的工作与Maven没有太大区别。因此，一些翻译是必要的。一些功能，如 依赖目录、Maven发布插件、Dependabot等功能实际上是对Maven已有的基本功能的变通。 的基本功能。Gradle的灵活性往往伴随着复杂的构建配置、 难以维护。 Gradle插件往往有兼容性问题，有局限性或进步有限。这些问题的出现 由于Gradle生态系统的不断发展，Gradle所处环境的多样性 使用环境的多样性，以及每个插件所需的具体实施和维护工作。一切都是相互关联的。
Gradle多米诺骨牌效应&ndash;现实世界中的噩梦般的情景 我见过很多只有几年历史的微服务，由于Gradle的存在，已经无法维护了。 由于Gradle的原因。值得一提的是，这并不是我第一次看到这样的事情，而且，他们不是 初级开发人员。 我的任务是进行Spring Boot 2.x到2.7的升级。Spoiler：一年后我放弃了 我放弃了!问题简述： * Gradle构建文件要求 -&gt; 将我的本地Java版本降级到11 (WTF) (通常情况下，Java是向下兼容的。 向下兼容&ndash; 同样，也有像SdkMan这样的变通工具&hellip;) * Spring Boot的更新需要 -&gt; Gradle更新（WTF）。 *Gradle更新需要 -&gt; 插件更新 * 插件更新需要 -&gt; Groovy更新 (WTF) * Groovy的更新需要 -&gt; 测试框架和测试的更新 (WTF) * 测试框架的更新需要 -&gt; 依赖关系的更新。 * [&hellip;] 此外，有些插件不能与较新的Gradle版本一起使用，有些已经不再开发，有些与其他Gradle版本不兼容，有些已经不再开发，有些与其他Gradle版本不兼容。 与其他插件不兼容，只适用于Gradle KTS，不适用Gradle Groovy，或者只是有 只是有限制。即使是Spring等大厂商的插件，与他们的Maven插件相比，功能也很有限。 功能有限。我最终得到了一个很酷很短的Gradle构建文件，但没有人能够真正维护它、 即使是编写文件的开发者也不能，而他们仍然喜欢Gradle。我知道很少有人能 认真写Gradle脚本的人。]]></description></item></channel></rss>