<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>&lt; 未言之事 ></title><link>https://novaannabella.github.io/the_unspoken/zh/</link><description>Explore the untold secrets and controversial realms of development in our daring blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Mon, 01 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/zh/index.xml" rel="self" type="application/rss+xml"/><item><title>霍拉克拉西</title><link>https://novaannabella.github.io/the_unspoken/zh/holacracy_is_wrong/</link><pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/holacracy_is_wrong/</guid><description>Holacracy-乌托邦背后的反乌托邦 简介 霍拉克拉西被誉为现代组织结构的圣杯。它承诺扁平化的层级结构，更多 员工参与以及快速的适应能力。但是，它真的是 组织问题的灵丹妙药，还是有更多的内在因素？在这篇博客文章中，我们对 霍拉克拉西进行批判性的审视，以及为什么它可能不是每个公司的理想解决方案。
团队结构的成本 在霍拉克拉西制度中，团队的建设方式就像是公司内部的小型企业。 这听起来很有前景，但魔鬼在细节中。一个团队必须覆盖各种角色， 这使得团队规模和人工成本呈指数级增长。集中力量并 专注于共同目标变得困难。此外，协调许多不同的角色是一个巨大的 挑战。最终的结果是效率低下的团队和高额的人力成本，这绝对不是一个可持续的 商业模式。
针对员工的挑战 霍拉克拉提要求员工高度自我组织和自主负责。但是，如果不是每个人都愿意或能够做到这一点呢？员工的进一步发展如何呢？他们经常是团队内部各自角色中的唯一人员，冒着可能偏离最佳发展路径的风险。此外，员工通常不是按照他们多样化的角色，而是按照他们的主 要位置支付，这可能导致责任和补偿之间的不符。
官僚主义的怪兽 具有讽刺意味的是，寻求灵活性和敏捷性的全权系统可能会导致更多的官僚主义。因为每个团队和员工都必须理解大量的规则和责任。这些新的官僚主义层级可能会使公司变慢，从而反对全权系统的实际目的。全权系统甚至会在日常工作中增加更多的会议。
社会凝聚力的损失 Holakratie的平坦层级结构和分散结构可能会讽刺地导致“隐形层级”。这产生了一种社会复杂性，可能会导致误解和冲突。没有明确的沟通线路，这可能会增加团队和个体的孤立感。
结论 Holakratie并不是一剂适合所有公司的通用药方，它显然不适合每个公司，每个团队，甚至每个员工。尽管理论上的优势听起来非常吸引人，但在实践应用中存在很多挑战和缺点。因此，公司应该非常仔细地考虑这种组织模型是否适合他们的文化，他们的目标， 以及他们的员工。 如果员工已经可以参与其中，就无需Holakratie。 但是，如果员工不能参与其中，Holakratie也无法挽救什么。
联系方式 GitHub问题.</description></item><item><title>云计算的风险</title><link>https://novaannabella.github.io/the_unspoken/zh/risks_of_cloud/</link><pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/risks_of_cloud/</guid><description>云计算的风险 - 为什么您应该三思而后行 引言 云的炒作是无法忽视的。从小型创业企业到大型企业 - 所有人都对云的灵活性，扩展性和简单性赞不绝口。但是，就像伊卡洛斯因飞得太近太阳而烧伤一样，那些不加思索就迁移到云的公司也可能遇到危险的陷阱。
费用和透明度 云计算世界，可能看起来很吸引人，但在这光鲜的表面之后，往往隐藏着高额 成本。刚刚转向云计算的企业，往往过了很久才意识到账单的迅速增加。这 并非巧合，许多利用AWS的公司，也裁员或冻结工资。云的灵活性 通常会被成本的不可预测性所抵消。云计算非常昂贵，应该清楚并 接受这个事实。
技术和建筑 云的广泛功能可能像梦一样，但也可能变成噩梦。缺乏标准协议意味着您的系统很难甚至无法与外部或标准 技术进行通信。此外，基础设施，架构和服务经常融为一体， 这意味着两个层次都需要进行调整 - 这是复杂性和头痛的配方。
安全风险和透明度 虽然云服务提供商提供广泛的安全机制，但云仍然是网络攻击的吸引目标。问题并非是它是否比自有部署安全，而是你是否愿意承担该风险。 此外还有透明度问题：没有清晰的使用和成本视图，进行有意义的预算规划几乎不可能。由于许多隐藏的成本，每个成本计划都应至少乘以2。
长期战略和人力资源 对云的选择不应孤立地考虑，而应作为更广泛的，长期的企业战略的一部分。此外，技术的选择对于您需要为公司招聘的专、门型人才的类型具有不可忽视的影响。
结论 云并不是它经常被吹捧的灵丹妙药。 它带有风险，应该被认真考虑。从成本到安全性，从技术限制到人员规划， 云的决定是复杂的，不应该轻易做出。考虑如Kubernetes这样的替代品是值得的，它们可以提供灵活性，标准化和透明度。
联系方式 GitHub问题。</description></item><item><title>测试层次：找到正确的平衡</title><link>https://novaannabella.github.io/the_unspoken/zh/test_level/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/test_level/</guid><description>测试层次：找到正确的平衡 引言 测试主题似乎至今仍是一个有很多解释空间的新领域。传统的测试金字塔已经受到质疑，新的测试金字塔已经出现。我认为我们不需要测试金字塔，而是需要明确的理解需要测试什么。在较低级别的测试往往不那么有说服力。重点应当是测试行为，以确保API或UI能够如期望的那样工作。关于可能的测试类型的详小请在这里找到：马丁福拉测试。
第一级 - 模拟测试和单元测试 目标：执行应用程序中最小可测试的软件部分，以确定它们是否按预期 工作。 模拟测试和单元测试可能会产生反效果，并通常阻碍开发过程。 这些测试往往 与上下文无关，与现实关系很小。 它们通常仅用于维持不必要的功能超过现有的 单元测试。 一旦添加了模拟，它就会成为一种自我敷衍的表现。 模拟测试的预期结果仅限于最初在模拟中定义的内容。 最终用户 不关心内部功能。例如，在一个 登录场景loginUser(name, password, securityAlgorithmus)。 如果单元测试对 securityAlgorithm参数进行空检查，那么进行的测试将过多，因为用户不能设置securityAlgorithm参数。
第二级 - 集成测试 目的：检验组件间的通信路径和交互，以识别 接口缺陷。 集成测试提供了关于应用程序各部分性能和独立性的宝贵见解。使用更少的模拟，测试会更容易理解。但是，它们仍然缺乏上下文，且 存在集成测试仅仅是伪装成的使用更少模拟的单元测试的风险。
第三级 - 组件测试 目的：限制所测试软件的范围至待测试系统的一部分，通过内部代码接口操控系统以及使用测试替身分离待测试代码与其它组件。 组件测试能为应用的质量和性能提供大量信息。你最终不是测试Mocks，而是测试你的应用。组件测试和端到端测试的界限并不显著。 有着良好测试环境的话，他们之间的界限经常模糊，因此测试实际行为而非疏离的和脱离上下文的功能变得可能。然而，创建额外的测试类，如组件存根，假装和模拟在生产代码中可能会带来额外的维护成本。
级别 4 - 合同测试 这段代码块的目的是检查一个外部服务的边界交互，并 确保它符合消费服务的契约要求。
契约测试通常类似于组件测试，它们之间的区别最小。一些开发者 将这些测试与Pact测试相关联，这些测试基本上充当了有一个服务器介入的单元测试。然而， 维护这些测试的成本可能不值得。例如，一个Pact测试可能会测试 REST-API loginUser?name=aa&amp;amp;password=bb)并期待一个 JSON-Schema响应，该响应之前已经上传到Pact服务器 。这个模式是静态的，容易出现错误，如API回应中的错误日期格式或时区。 影响可能是巨大的。
第五级 - 端到端测试（也被称为黑盒测试） 目的：通过从头到尾测试整个系统，来检查系统是否满足外部要求，并实现其目标。 端到端测试是可靠和稳健的。一旦超越了搭建测试环境的难关，所付出的努力就会得到回报。这些测试模拟真实行为，消除了模拟的需求。错误更少发生，并且在本地更易于重现。大量 的调试和在生产中的日志记录得到了大多数的回避，同样罕见的事件也得到了规避。开发者更少，甚至不用使用生产数据，这降低了责任并提高了焦点。此外，自动操作（如自动软件更新）如同行为已经被测试过一样，简化了操作。还有更多的优点！一旦以可重复使用的形 式编写测试，它们就可以被集成到负载测试中，以获取功能的全面图像。这些测试也可以在生产环境中连续运行，并在不同工作流的状态中提供实时的视野。如果一个子系统，如外部REST服务，离线，可以立即识别出受影响的用户工作流。
结论 总的来说，测试是软件开发的一个关键方面，测试阶段的选择取决于应用程序的具体要求和目标。虽然模拟测试和单元测试在效用上可能有限，但集成测试和组件测试能够提供有关应用程序行为和性能的宝贵见解。契约测试有助于验证与外部服务的交互，但与组件测试的区 别可能很小。最后，端到端测试提供了对系统功能的最大信任，并允许对整个应用程序进行全面测试。通过选择适当的测试阶段并有效地组合它们，开发人员可以确保你的软件的质量，可靠性和稳健性。
联系方式 GitHub问题.</description></item><item><title>AI炒作</title><link>https://novaannabella.github.io/the_unspoken/zh/ai_behind_the_hype/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/ai_behind_the_hype/</guid><description>在现实世界中的人工智能 - 超越炒作的思考 引言 当谈到人工智能（AI）的应用时，有很多令人烦恼的激动和期待。 有些人认为AI将革新工作世界，并使人类的能力变得多余。但在我们头脑热烈地跳入AI世界之前，我们应该考虑一些重要的点。AI无疑已经取得了进步， 但它并不新鲜，而且有相当大的限制，我们必须理解和尊重。 剧透：AI只是另一个工具。我们离像《终结者》那样的电影场景还有很长的路要走。 像ChatGPT这样的现代AI也是一个很好的例子，说明软件应该如何被设计！服务化和 不像瑞士军刀 aka 只有很少时候有用或可重复使用的万能解决方案。
一些挑衅性的问题：
每一个认为人工智能是新的或者能够取代他工作的程序员，不是应该更多地思考他的视野和专业技能吗？ 那些转向 AI 模型的 Data Scientists :为什么你们特定的 AI 模型比大型全功能语言模型差？你们之前做了什么，缺少什么，才不能创建出同样优秀的模型，特别是针对你们的用例？ 理解边界 KI模型，包括基于GPT的模型，是根据现有数据和模式进行训练的。他们擅长识别模式并根据这种训练生成内容，但是他们缺乏真正的理解或思考超出他们训练的能力。认识到这个限制有助于设定现实的期望。不存在的事物也不会存在。质量高，保密和安全的信息是少 数。总会有更多的新手比高级人员。因此，KI只适用于低级别的“Hello World”示例。在很多领域，比如那些担心失业的程序员，应该认真考虑他们工作的质量。
人工智能开发的成本以及计算能力的重要性 人工智能的发展在很大程度上推动了硬件的不断发展。例如 GPT-3.5 这样的人工智能模型需要巨大的计算能力才能处理复杂的任务。人工智能的成本与所需的硬件紧密相关，如高性能的 GPU 和 TPU。此外，还需要持续支付运行和维护基础设施的费用。尽管计算能力的提高增加了人工智能的可用性，但仍需要大量的投资。为了确保人工智能项目的经济成功，成本优化和高效的资源管理至关重要。因此，在实施人工智能时，进行深入的成本分析和规划是必不可少的。
补充人类智能 人工智能应被视为补充人类智能的工具，而非替代它。人的判断力，批判性思维和创造力仍然是必不可少的。AI可以提供有价值的洞察，自动化重复任务，提高生产力，但不应单独用于重要决策。如果没有你的参与，AI将无法考虑到你所需要的所有方面。 在计算机科学中，AI自身不会思考诸如：恢复力，安全性，合规性，数据隐私，可读性，性能，简洁性，模式，时效性等主题。 示例AI 3D建模：Alex使用Blender测试AI (看起来不错 但只是一个&amp;quot;Hello World&amp;quot;示例) 我对AI代码生成的经验用一个词来形容：可笑！那些写这样代码的开发人员，我 不愿意留下。然而，我将AI作为一种自我反思的对手，也就是解释效应。 人工智能的最有效应用通常通过人与AI系统的合作来实现。AI可以帮助 生成想法，找到解决方案或自动化某些任务，但人类 监督和干预是关键，用于优化，改进和完善结果。
验证和测试 KI生成的结果应该总是彻底验证和测试。无论是代码，内容或其他输出，都需要人工监控以确保生成结果的质量，正确性和符合性。验证过程是至关重要的，以免依赖于不准确或误导性的结果。请不要用另一个KI来验证KI。这就像我不是自己批改学生的作业，而是让 我的学生去批改。
持续学习和适应 KI模型必须进行持续更新和完善，以适应不断变化的情况。 需要反馈循环和迭代改进，以确保 人工智能生成结果的准确性，相关性和有效性。人工智能的学习过程永不停歇。
专注于解决现实问题 人工智能应用于解决真正的问题并为人们创造价值。重要的是，不仅仅是为了它自身而应用人工智能。明确的目标，识别问题，以及理解对参与者的影响是在涉及AI解决方案时至关重要的。
结论 人工智能无疑是一个强大的工具，但理解其限制并负责任地使用它是重要的。AI不能取代人类的智能和人类的判断力， 创造力和批判性思考仍然是不可或缺的。通过仔细的 验证，思考和人与AI的协作，我们可以得到最好的结果。 让我们利用AI的优势来解决真实的问题并改善世界。
联系方式 GitHub问题。</description></item><item><title>幻觉无服务器 &amp; 云</title><link>https://novaannabella.github.io/the_unspoken/zh/illusion_serverless_cloud/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/illusion_serverless_cloud/</guid><description>云中无服务器功能的幻觉 引言 我对市场营销经常胜过常识感到失望。许多经理忽视了他们自己的专家 - 开发者。云迁移也是如此。剧透：需要节省资金的人应该避免使用云。因为云中的新的热词&amp;quot;无服务器&amp;quot;意味着：你关心软件，我们来处理硬件。但是，如果你有一个能干、积极、好奇的管理员，他也可以自己操作无服务器（比如 KNative）。
无服务器功能 vs 微服务： 微服务 一个典型的无状态微服务负责某个特定的功能/领域，并在一个 容器编排环境中部署。这个环境负责基础设施，安全，防火墙， 日志，指标，秘密，网络，备份以及更多。一个巨大的优势是，微服务可以在本地用 少量 资源集成测试，而且对云/服务器是不可知的（可以在任何地方部署）。
无服务器函数 一个小笑话先行：悖论，但事实 - 无服务器函数强烈依赖于服务器环境。:) 一个典型的无服务器函数也只关注一个特定的函数/领域，并且在 纯代码中编写，以比微服务更快（也是微服务的一个好练习）。一个大的 优点是，无服务器函数会自动扩展。然而，每个无服务器函数需要 大量的GlueCode来定义基础设施 - 安全性，防火墙，网络，日志，度量， 秘密，缓存，备份等等。 因此，一个简单的功能，如复制文件包括API，可能需要1500行代码（包括IaC）。 管理成本从管理转移到了1：N的开发比例（1对于无服务器 函数）。因此，知识和实现不再是 集中的，可能很快就会变得不稳定。此外，维护成本会增加。 同时，真正的集成测试对于无服务器来说很少，或者只能以大量的工作为代价。 最终，无服务器函数的复杂度明显高于一个微服务的复杂度。 更高的复杂性也意味着更低的可维护性。新的团队成员会感到困难，并且需要明显 更多的预知识。
无服务器以及通常意义上的云 大多数云技术并非最新的。例如，Node.js、Java、Python和其他语言或技术通常很难进行更新，通常您只能选择等待。 像MongoDB、MySQL、Kafka、NATS、RabbitMQ、Redis、Prometheus、InfluxDB、Grafana、Kibana、Elastic Search等现代和标准技术要么无法获得，要么价格过高。 没有这些标准服务，您通常会陷入虚拟的石器时代，使用过时的解决方案，例如使用Webhooks进行对外通讯。此外，处理像规管、合规性、数据保护和故障备份等主题时的操作空间严重受限。
因此云应该被无差别地运行，以便能快速地在AWS，Azure，Google，On-Premise等之间切换和比较成本。 云中经常存在限制，这就导致了有创造性的解决方案，从而增加了复杂性。集成测试也可能变得很昂贵，因为每个开发者都需要在云中拥有自己的开发环境，因为许多云服务很少或甚至无法在本地进行测试。 但即使没有测试，云也是昂贵的。而在On-Premise系统中主要产生硬件成本，在云中还需要额外支付流量，一些标准服务，甚至有时要为多次征税支付费用。此外，在云中很容易失去概述，因为这不仅只是关于用户友好性，而更是关于金钱。成本是如此隐蔽，以至于人们在十分晚的时候才会注意到它。
云中的架构和基础设施的基础部分，尤其是在无服务器领域，必须重新创新，因为实现方式强烈依赖于可用的功能。 每次我设计架构后，我都会有这样的想法：“这也可以是一个单独的服务”。
我认为无服务器是一个有趣的想法，它可以很好地进行扩展，但并不能降低成本。相反，它要求在开发中投入更多的知识和时间。无服务器或云需要纪律性和预知的知识。 如果对On-Premise系统没有知识，那么与云的掌握就不会变得更容易。 开发者应该如何额外掌握基础设施知识？
我更倾向于选择管理良好的Kubernetes集群而非云架构。 工作人员不能扩展。很多开发者在写代码时没有纪律性。 可惜这适用于百分之八十的开发者。那么这些开发者应该如何操作云？
重要的是，企业需要全面理解无服务器架构和云的挑战和影响。这不仅需要技术知识，还需要战略方法。不经思考就迁移到云可能会导致复杂性、更高的成本和开发者的压力过大。
总体来说，虽然无服务器在云中是一个有前途的概念，但应该要认真对待。需要考虑成本、复杂性、可维护性以及开发团队的能力。 每个公司都有不同的需求和优先项。应该做出明智的决定，确定无服务器在云中是否是正确的解决方案，或者选择其他像良好的Kubernetes集群这样的替代方案。
无服务器和云计算的成功应用需要技术专业知识、战略规划和对业务需求的清晰理解的结合。这样才能看透无服务器的幻象，并为自己的软件开发做出正确的决定。
结论 在云中引入无服务器功能承诺了灵活性，可伸缩性和对开发人员的基础设施任务的解脱。然而，人们不应该被这种幻想所迷惑。转向云和使用无服务器功能带来了一系列的挑战。 开发者必须在主要的开发工作之外学习一种新的“语言”，并在没有适当支持的情况下承担 更多的责任。无服务器功能的复杂性通常比微服务的复杂性更高，因为开发者必须承担许多额外的任务，如基础设施定义，安全性和扩展性。真正的集成测试是困难的，而在云中运行的前期知识和经验更为重要。 云本身也带来了更多挑战。许多云技术并未跟上最新的发展，使用现代标准服务可能会昂贵或甚至不可能。监管规定，合规性和数据保护限制了操作范围。此外，云的费用很容易失控，人们很快就会失去对支出的概述。 总的来说，需要仔细权衡无服务器和云的优缺点。企业应该考虑他们的特殊需求，团队中现有的知识和迁移到云的长期影响。基于全面分析的明智决定对项目的成功和盈利能力至关重要。 最后，企业应支持其开发者，逼真地估算云的成本和复杂性，并考虑使用像管理良好的Kubernetes集群等替代方案。通过明确的策略和对自己需求的深入理解，企业可以最大限度地利用云和无服务器的功能，看穿幻象。
联系方式 GitHub问题。</description></item><item><title>回到Maven？</title><link>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</guid><description><![CDATA[回到Maven？ Gradle的10年。寻找缓解并简短回顾Maven的强大之力。 最大化开发者的潜力 - 我们需要更多节省时间的工具 我对经常被忽视或很少讨论的主题感兴趣。酷炫的技术经常被使用， 但几乎没有人谈论与之相关的问题。 发展至今已经变得非常繁琐。 随着像“无服务器”、“低代码”、“IaC”、“大数据”、“云”、“DevOps”、“你建它你运行它” 等酷炫的热词，开发人员已经有更多的额外任务要处理。更多的任务意味着几乎没有 专家存在，总是会有些什么被忽视来寻求关注。因此，自动化和节省时间变得非常 重要。“不要让我思考”和“开箱即用”已经是我在Gradle中还 看不到的好的质量标准。为了公平，Gradle不是唯一让我们干活而不是简化它的现代工具。
对简单性和自动化的虚幻追求 自从SOAP以来，我对基于XML的配置深感厌恶。我曾希望使用Gradle写绑定脚本会变得轻而易举，但是每次的结果都让我的希望和动力降低。Gradle追求的是灵活性，为此牺牲了自动化和质量。开发者们盲目地跟随潮流，不考虑对软件稳定性的影响。为 了使Gradle构建脚本简单且易于维护，需要强烈的纪律性。这种纪律性在源代码中就已经很少见，因此在构建脚本中就更加罕见了。
翻译和变通方法 - 当构建脚本成为挑战时 Gradle在后台的工作方式与Maven并无太大差异。因此，需要进行一些翻译。如Dependency Catalog，Maven Release Plugin，Dependabot以及许多其他功能实际上都是Maven已经提供的基本功能的替代方案。由于Gradle的灵活性，经常会出现复杂的构建配置，这些配置很难维护。 Gradle插件经常存在兼容性问题，限制或有限的发展空间。这些问题是由于Gradle生态系统的发展性，Gradle的使用环境的多样性，以及每个插件的特定实施和维护成本所导致的。所有的一切都是相互关联的。
Gradle的多米诺骨牌效应 - 现实世界中的恶梦场景 我已经看到很多微服务，它们只有几年的历史，但由于Gradle的原因已经不再维护。很重要的一点是，这并不是我第一次看到这样的情况，而且，不，它们不是初级开发人员。
我的任务是进行一个Spring Boot 2.x到2.7的升级。剧透：我做了一年都放弃了！问题简述：
Gradle构建文件需要 -&gt; 降级我本地的Java版本到11（WTF）（通常Java 是向下兼容的 - 这里也有像SdkMan这样的解决方案工具&hellip;) Spring Boot更新需要 -&gt; Gradle更新 (WTF) Gradle更新需要 -&gt; 插件更新 插件更新需要 -&gt; Groovy更新 (WTF) Groovy更新需要 -&gt; 测试框架和测试更新 (WTF) 测试框架更新需要 -&gt; 依赖性更新 [&hellip;] 此外，一些插件不能与新版本的Gradle一起使用，一些已经停止开发，与其他插件不兼容，只能用Gradle KTS，不能用Gradle Groovy，或者有一些限制。即使是像Spring这样的大型提供商的插件，与它们的Maven插件相比，也有功能限制。最后，我得到一个酷酷的，短暂的Gradle构建文件，没有人能正确地维护它，甚至包括那些写它的开发人员，他们仍然喜欢Gradle。我只知道很少有人能真正理解或编写Gradle脚本。 重新发现Maven的力量 - 利用Maven的魔法力量 以下是我最喜欢的Maven功能： 插件可以直接从命令行启动和配置，而无需预先定义。 而且，它们大都独立于其他插件配置。
示例命令 描述 链接 mvn versions:use -latest-versions 更新版本 - 谁需要Dependabot?]]></description></item></channel></rss>