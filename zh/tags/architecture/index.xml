<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Architecture - Tag - &lt; 未言之事 ></title><link>https://novaannabella.github.io/the_unspoken/zh/tags/architecture/</link><description>Architecture - Tag - &lt; 未言之事 ></description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Tue, 23 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/zh/tags/architecture/" rel="self" type="application/rss+xml"/><item><title>Illusion Serverless &amp; Cloud</title><link>https://novaannabella.github.io/the_unspoken/zh/illusion_serverless_cloud/</link><pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/illusion_serverless_cloud/</guid><description>云上无服务器功能的幻觉 引言 我对市场营销如何频繁地战胜常识感到失望。许多经理不顾他们自己的专家——开发人员。这也适用于迁移到云端。剧透：如果需要节约资金，应该避免使用云端。因为云端的新概念&amp;quot; 无服务器&amp;quot; 意味着：你关注软件，我们关注硬件。然而，如果您有一个有能力、有动力和好奇心的管理员，您也可以自己运行无服务器（例如KNative）。
无服务器功能 vs 微服务： 微服务 典型的无状态微服务负责特定的功能/领域，并在容器编排环境中部署。该环境负责基础设施、安全、防火墙、日志记录、指标、秘密、网络、备份等等。一个重要的优势是，微服务可以在本地使用少量资源进行集成测试，并且是云端/服务器不可知的（可在任何地方使用）。
无服务器功能 先说一个小笑话：矛盾而真实——无服务器功能在很大程度上依赖于服务器环境。 :) 典型的无服务器功能同样负责特定的功能/领域，并且不使用框架，以纯代码形式编写，以实现比微服务更快的速度（也是对微服务的良好练习）。一个重要的优势是，无服务器功能可以自动扩展。然而，每个无服务器功能都需要相当大量的粘合代码来定义基础设施——安全性、防火墙、网络、日志记录、指标、秘密、缓存、备份等等。 因此，一个简单的功能，例如包括API的文件复制，可能需要快速达到1500行代码（包括基础设施即代码）。 管理成本从管理转移到开发，比例为1:N（1个无服务器功能对应多个管理）。因此，知识和实现不再集中，可能很快变得不稳定。此外，维护成本也会增加。 与无服务器相关的真正集成测试很少或者只能通过大量工作来实现。 最终，无服务器功能的复杂性明显高于单个微服务。更高的复杂性意味着更低的可维护性。新团队成员更难上手，需要更多的先前知识。
无服务器和云计算的概况 大多数云技术并不更新。例如，Node.js、Java、Python和其他语言或技术通常很难升级，只能等待。 即使是现代和标准技术，如MongoDB、MySQL、Kafka、NATS、RabbitMQ、Redis、Prometheus、InfluxDB、Grafana、Kibana、Elastic Search等，要么不可用，要么价格昂贵。 在没有这些标准服务的情况下，往往陷入了虚拟的“石器时代”，使用过时的解决方案，例如使用Webhooks进行外部通信。此外，涉及监管、合规性、数据保护和容错性等问题的行动空间也受到严格限制。
因此，云应该以通用方式运行，以便能够快速在AWS、Azure、Google、On-Premise等之间切换和比较成本。 即使在云端，仍然存在限制，这导致了创造性的解决方案，进一步增加了复杂性。由于许多云服务几乎无法或根本无法在本地进行测试，集成测试也可能变得昂贵，因为每个开发人员都需要在云中拥有自己的开发环境。 然而，即使没有测试，云计算也是昂贵的。在本地系统中，主要涉及硬件成本，而在云中，还需要支付流量、一些标准服务甚至可能面临多重征税的费用。此外，云中很容易失去概览，因为它并不关注用户友好性，而关注的是金钱。成本是如此隐蔽，以至于人们直到为时已晚才注意到它们。
在云中，尤其是在无服务器领域，必须重新发明架构和基础设施的基础知识，因为实现强烈依赖于可用的功能。 每当我设计架构时，我都会想到：“这也可以是一个单独的服务。”
对我来说，无服务器是一个有趣的想法，它具有良好的可扩展性，但它并不降低成本。相反，它需要更多的开发知识和时间。无服务器或云计算需要纪律和先前知识。 如果缺乏本地系统的知识，那么使用云计算也不会更容易。开发人员如何获得基础设施知识？
我更倾向于一个良好管理的Kubernetes集群，而不是云架构。 员工不具备扩展能力。许多
结论 在云中引入无服务器功能承诺灵活性、可扩展性和解放开发人员的基础设施任务。然而，不应该被这种幻觉所蒙蔽。迁移到云端并使用无服务器功能会带来一系列挑战。
开发人员除了实际开发之外，还必须学习一门新的“语言”，承担更多责任而缺乏相应的支持。 无服务器功能的复杂性通常比微服务更高，因为开发人员需要承担许多额外任务，如基础设施定义、安全性和扩展性。真正的集成测试是困难的，对云计算的运营知识和经验变得更加重要。
云本身也带来了其他挑战。许多云技术并不是最新的，使用现代的标准服务可能昂贵或不可行。监管要求、合规性和数据保护限制了操作的自由度。此外，云端的成本很容易失控，很容易失去对支出的了解。
总体而言，我们需要仔细权衡无服务器和云计算的优缺点。 企业应该考虑其特定需求、团队的专业知识以及迁移到云端的长期影响。 基于全面分析的明智决策对项目的成功和盈利能力至关重要。
最终，如何适当支持开发人员、实际评估云端的成本和复杂性，并考虑替代解决方案（如良好管理的Kubernetes集群），取决于企业。 通过明确的战略和对自身需求的深入了解，企业可以最大限度地发挥云和无服务器功能的优势，并看透这种幻觉。
联系方式 GitHub问题页。</description></item></channel></rss>