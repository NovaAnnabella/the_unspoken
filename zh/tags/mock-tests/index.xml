<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Mock Tests - Tag - &lt; 未言之事 ></title><link>https://novaannabella.github.io/the_unspoken/zh/tags/mock-tests/</link><description>Mock Tests - Tag - &lt; 未言之事 ></description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Wed, 31 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/zh/tags/mock-tests/" rel="self" type="application/rss+xml"/><item><title>测试水平：寻找正确的平衡</title><link>https://novaannabella.github.io/the_unspoken/zh/test_level/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/test_level/</guid><description><![CDATA[测试水平：寻找正确的平衡 [！testebenen](https://martinfowler.com/articles/microservice-testing/)
###简介
测试的话题似乎仍然是一个未知的领域，有很多解释的空间。传统的 测试金字塔受到了质疑，新的测试金字塔已经出现了。在我看来，没有必要建立一个 测试金字塔，而是要清楚地了解需要测试的内容。较低层次的测试往往 意义不大。重点应该主要放在测试行为上，以确保 API 或用户界面能如期工作。关于可能的测试类型的全面概述可以在这里找到： Martinfowler Testing。
1级 - 模拟测试和单元测试 目标：锻炼应用程序中最小的可测试软件部分，看它们是否按预期工作。 工作。 模拟测试和单元测试可能会适得其反，往往会阻碍开发过程。这些测试通常是 脱离了上下文，与现实没有什么关系。他们往往只是通过现有的单元测试来维护不必要的功能。 单元测试。一旦加入模拟测试，就会变成一种自我否定的做法。预期的 模拟测试的预期结果被限制在原始模拟中定义的内容。终端用户 对内部函数不感兴趣。例如，在一个 登录场景中loginUser(name, password, securityAlgorithm)。如果单元测试对 如果单元测试对 &ldquo;securityAlgorithm &ldquo;参数进行空检查，就会完成过多的测试，因为用户不能设置 &ldquo;securityAlgorithm &ldquo;参数。 设置 &ldquo;securityAlgorithm &ldquo;参数。
2级&ndash;集成测试 目的：检查组件之间的通信路径和相互作用，以发现 接口缺陷。 集成测试为应用程序的不同部分的性能和独立性提供了有价值的见解。 应用。有了更少的模拟，测试变得更容易理解。然而，他们仍然缺乏上下文，而且有一种风险，即 危险，即集成测试只是在较少的模拟中变相的单元测试。
3级&ndash;内容测试 目的：将被测软件的范围限制在被测系统的一部分，通过内部代码接口来操纵系统 通过内部代码接口和使用测试替身将被测代码与其他组件隔离。 组件。 组件测试提供了大量关于应用程序的质量和性能的信息。而不是 mocks，你最终测试你的应用程序。组件测试和端到端测试之间的界限并不 显著。有了一个好的测试环境，它们之间的界限往往变得模糊，因此，测试真正的 行为，而不是孤立的和无背景的功能。然而，创建额外的 然而，在生产代码中创建额外的测试类，如组件存根、赝品和模拟，会增加维护开销。
4级&ndash;合同测试 这个代码块的目的是检查外部服务的边界上的交互，并确保它符合消费服务的合同要求。 确保它符合消费服务的合同要求。 契约测试通常类似于单元测试，它们之间的区别很小。一些开发者 将这些测试与Pact测试联系在一起，Pact测试本质上是单元测试，中间有一个服务器。维护这些测试的努力 然而，维护这些测试的努力可能是不值得的。例如，一个Pact测试可以使用 REST API loginUser?name=aa&amp;password=bb)，并期待一个先前上传到Pact服务器的JSON模式响应。 服务器。这种模式是静态的，容易出现错误，如日期格式不正确或时区在 API响应。其负面影响可能是巨大的。
###第五级&ndash;端到端测试（也叫黑盒测试）。
目的：通过对整个系统从头到尾的测试，验证一个系统是否符合外部要求并实现了其目标。 从头到尾。 端到端测试是可靠的和强大的。一旦建立测试环境的障碍被克服，努力就会得到回报。 努力得到了回报。这些测试模拟了真实的行为，消除了对模拟的需要。错误发生的频率较低 并且更容易在本地重现。在生产中耗费时间的调试和记录在很大程度上被避免了，因为不经常发生的错误也被避免了。 在很大程度上，我们可以避免出现罕见的事件。开发人员更少地与生产数据打交道，即使有也是如此。 如果有的话，开发人员也不会经常与生产数据打交道，这就减少了责任，提高了注意力。此外，自动化，如 自动软件更新使实施更容易，因为行为已经被测试过了。还有其他的好处!一旦 一旦测试被写成可重复使用的形式，它们可以被集成到负载测试中，以获得一个全面的 功能的全面情况。这些测试也可以在生产环境中连续运行 并提供对各种工作流程状态的实时了解。当一个子系统，如 例如，REST服务离线时，可以立即确定哪些用户工作流受到影响。 是受影响的。]]></description></item></channel></rss>