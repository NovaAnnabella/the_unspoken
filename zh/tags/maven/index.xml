<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Maven - Tag - &lt; 未言之事 ></title><link>https://novaannabella.github.io/the_unspoken/zh/tags/maven/</link><description>Maven - Tag - &lt; 未言之事 ></description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Mon, 01 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/zh/tags/maven/" rel="self" type="application/rss+xml"/><item><title>回到玛文？</title><link>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</guid><description><![CDATA[回到Maven？ [！maven_vs_gradle](https://phauer.com/2018/moving-back-from-gradle-to-maven/)
10年的Gradle。为了寻求解脱，重新发现Maven的力量的短暂旅程。 ###最大限度地发挥开发者的潜力&ndash;我们需要更多的省时工具
那些经常被忽视或很少被讨论的话题让我感兴趣。经常有一些很酷的技术在使用、 但几乎没有人谈及与之相关的问题。 现在的开发成本已经很高了。 随着 &ldquo;无服务器&rdquo;、&ldquo;低代码&rdquo;、&ldquo;IaC&rdquo;、&ldquo;大数据&rdquo;、&ldquo;云&rdquo;、&ldquo;DevOps&rdquo;、&ldquo;你建立它你运行它 &ldquo;等很酷的流行语，开发者已经受够了。 等等，开发人员已经有足够多的额外任务要处理。更多的任务意味着，几乎没有任何 专家，而且有些事情总是被忽略的重点。这就是为什么自动化和节省时间是巨大的 重要。&ldquo;不要让我思考 &ldquo;和 &ldquo;开箱即用 &ldquo;已经是高质量的功能了，我在Gradle中还没有看到。 还看不到。公平地说，Gradle并不是唯一让我们的工作变得更容易的现代工具，而不是让它 让它变得更容易。
###对简单性和自动化的虚幻追求
从SOAP开始，我就对基于XML的配置有一种根深蒂固的厌恶。有了Gradle，我曾希望 编写绑定脚本会变得轻而易举。不幸的是，我的希望和动力每次都在减少 每次都会减少。Gradle追求的是灵活性，并为此牺牲了自动化和质量。开发人员盲目地跟随 开发人员盲目地跟风，而不考虑对软件可靠性的影响。为了使Gradle 构建脚本简单化和低维护性，需要强大的纪律性。这种纪律性在 源代码中已经很少了，因此在构建脚本中就更少了。
翻译和变通方法 - 当构建脚本成为一种挑战时 Gradle在后台的工作与Maven没有太大区别。因此，一些翻译是必要的。一些功能，如 依赖目录、Maven发布插件、Dependabot等功能实际上是对Maven已有的基本功能的变通。 的基本功能。Gradle的灵活性往往伴随着复杂的构建配置、 难以维护。 Gradle插件往往有兼容性问题，有局限性或进步有限。这些问题的出现 由于Gradle生态系统的不断发展，Gradle所处环境的多样性 使用环境的多样性，以及每个插件所需的具体实施和维护工作。一切都是相互关联的。
Gradle多米诺骨牌效应&ndash;现实世界中的噩梦般的情景 我见过很多只有几年历史的微服务，由于Gradle的存在，已经无法维护了。 由于Gradle的原因。值得一提的是，这并不是我第一次看到这样的事情，而且，他们不是 初级开发人员。 我的任务是进行Spring Boot 2.x到2.7的升级。Spoiler：一年后我放弃了 我放弃了!问题简述： * Gradle构建文件要求 -&gt; 将我的本地Java版本降级到11 (WTF) (通常情况下，Java是向下兼容的。 向下兼容&ndash; 同样，也有像SdkMan这样的变通工具&hellip;) * Spring Boot的更新需要 -&gt; Gradle更新（WTF）。 *Gradle更新需要 -&gt; 插件更新 * 插件更新需要 -&gt; Groovy更新 (WTF) * Groovy的更新需要 -&gt; 测试框架和测试的更新 (WTF) * 测试框架的更新需要 -&gt; 依赖关系的更新。 * [&hellip;] 此外，有些插件不能与较新的Gradle版本一起使用，有些已经不再开发，有些与其他Gradle版本不兼容，有些已经不再开发，有些与其他Gradle版本不兼容。 与其他插件不兼容，只适用于Gradle KTS，不适用Gradle Groovy，或者只是有 只是有限制。即使是Spring等大厂商的插件，与他们的Maven插件相比，功能也很有限。 功能有限。我最终得到了一个很酷很短的Gradle构建文件，但没有人能够真正维护它、 即使是编写文件的开发者也不能，而他们仍然喜欢Gradle。我知道很少有人能 认真写Gradle脚本的人。]]></description></item></channel></rss>