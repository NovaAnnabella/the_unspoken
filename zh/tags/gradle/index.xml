<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Gradle - Tag - &lt; 未言之事 ></title><link>https://novaannabella.github.io/the_unspoken/zh/tags/gradle/</link><description>Gradle - Tag - &lt; 未言之事 ></description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Mon, 01 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/zh/tags/gradle/" rel="self" type="application/rss+xml"/><item><title>回到Maven？</title><link>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/back_to_maven/</guid><description><![CDATA[回到Maven？ Gradle的10年。寻找缓解并简短回顾Maven的强大之力。 最大化开发者的潜力 - 我们需要更多节省时间的工具 我对经常被忽视或很少讨论的主题感兴趣。酷炫的技术经常被使用， 但几乎没有人谈论与之相关的问题。 发展至今已经变得非常繁琐。 随着像“无服务器”、“低代码”、“IaC”、“大数据”、“云”、“DevOps”、“你建它你运行它” 等酷炫的热词，开发人员已经有更多的额外任务要处理。更多的任务意味着几乎没有 专家存在，总是会有些什么被忽视来寻求关注。因此，自动化和节省时间变得非常 重要。“不要让我思考”和“开箱即用”已经是我在Gradle中还 看不到的好的质量标准。为了公平，Gradle不是唯一让我们干活而不是简化它的现代工具。
对简单性和自动化的虚幻追求 自从SOAP以来，我对基于XML的配置深感厌恶。我曾希望使用Gradle写绑定脚本会变得轻而易举，但是每次的结果都让我的希望和动力降低。Gradle追求的是灵活性，为此牺牲了自动化和质量。开发者们盲目地跟随潮流，不考虑对软件稳定性的影响。为 了使Gradle构建脚本简单且易于维护，需要强烈的纪律性。这种纪律性在源代码中就已经很少见，因此在构建脚本中就更加罕见了。
翻译和变通方法 - 当构建脚本成为挑战时 Gradle在后台的工作方式与Maven并无太大差异。因此，需要进行一些翻译。如Dependency Catalog，Maven Release Plugin，Dependabot以及许多其他功能实际上都是Maven已经提供的基本功能的替代方案。由于Gradle的灵活性，经常会出现复杂的构建配置，这些配置很难维护。 Gradle插件经常存在兼容性问题，限制或有限的发展空间。这些问题是由于Gradle生态系统的发展性，Gradle的使用环境的多样性，以及每个插件的特定实施和维护成本所导致的。所有的一切都是相互关联的。
Gradle的多米诺骨牌效应 - 现实世界中的恶梦场景 我已经看到很多微服务，它们只有几年的历史，但由于Gradle的原因已经不再维护。很重要的一点是，这并不是我第一次看到这样的情况，而且，不，它们不是初级开发人员。
我的任务是进行一个Spring Boot 2.x到2.7的升级。剧透：我做了一年都放弃了！问题简述：
Gradle构建文件需要 -&gt; 降级我本地的Java版本到11（WTF）（通常Java 是向下兼容的 - 这里也有像SdkMan这样的解决方案工具&hellip;) Spring Boot更新需要 -&gt; Gradle更新 (WTF) Gradle更新需要 -&gt; 插件更新 插件更新需要 -&gt; Groovy更新 (WTF) Groovy更新需要 -&gt; 测试框架和测试更新 (WTF) 测试框架更新需要 -&gt; 依赖性更新 [&hellip;] 此外，一些插件不能与新版本的Gradle一起使用，一些已经停止开发，与其他插件不兼容，只能用Gradle KTS，不能用Gradle Groovy，或者有一些限制。即使是像Spring这样的大型提供商的插件，与它们的Maven插件相比，也有功能限制。最后，我得到一个酷酷的，短暂的Gradle构建文件，没有人能正确地维护它，甚至包括那些写它的开发人员，他们仍然喜欢Gradle。我只知道很少有人能真正理解或编写Gradle脚本。 重新发现Maven的力量 - 利用Maven的魔法力量 以下是我最喜欢的Maven功能： 插件可以直接从命令行启动和配置，而无需预先定义。 而且，它们大都独立于其他插件配置。
示例命令 描述 链接 mvn versions:use -latest-versions 更新版本 - 谁需要Dependabot?]]></description></item></channel></rss>