<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Software Testing - Tag - &lt; 未言之事 ></title><link>https://novaannabella.github.io/the_unspoken/zh/tags/software-testing/</link><description>Software Testing - Tag - &lt; 未言之事 ></description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Wed, 31 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/zh/tags/software-testing/" rel="self" type="application/rss+xml"/><item><title>测试层次：找到正确的平衡</title><link>https://novaannabella.github.io/the_unspoken/zh/test_level/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/zh/test_level/</guid><description>测试层次：找到正确的平衡 引言 测试主题似乎至今仍是一个有很多解释空间的新领域。传统的测试金字塔已经受到质疑，新的测试金字塔已经出现。我认为我们不需要测试金字塔，而是需要明确的理解需要测试什么。在较低级别的测试往往不那么有说服力。重点应当是测试行为，以确保API或UI能够如期望的那样工作。关于可能的测试类型的详小请在这里找到：马丁福拉测试。
第一级 - 模拟测试和单元测试 目标：执行应用程序中最小可测试的软件部分，以确定它们是否按预期 工作。 模拟测试和单元测试可能会产生反效果，并通常阻碍开发过程。 这些测试往往 与上下文无关，与现实关系很小。 它们通常仅用于维持不必要的功能超过现有的 单元测试。 一旦添加了模拟，它就会成为一种自我敷衍的表现。 模拟测试的预期结果仅限于最初在模拟中定义的内容。 最终用户 不关心内部功能。例如，在一个 登录场景loginUser(name, password, securityAlgorithmus)。 如果单元测试对 securityAlgorithm参数进行空检查，那么进行的测试将过多，因为用户不能设置securityAlgorithm参数。
第二级 - 集成测试 目的：检验组件间的通信路径和交互，以识别 接口缺陷。 集成测试提供了关于应用程序各部分性能和独立性的宝贵见解。使用更少的模拟，测试会更容易理解。但是，它们仍然缺乏上下文，且 存在集成测试仅仅是伪装成的使用更少模拟的单元测试的风险。
第三级 - 组件测试 目的：限制所测试软件的范围至待测试系统的一部分，通过内部代码接口操控系统以及使用测试替身分离待测试代码与其它组件。 组件测试能为应用的质量和性能提供大量信息。你最终不是测试Mocks，而是测试你的应用。组件测试和端到端测试的界限并不显著。 有着良好测试环境的话，他们之间的界限经常模糊，因此测试实际行为而非疏离的和脱离上下文的功能变得可能。然而，创建额外的测试类，如组件存根，假装和模拟在生产代码中可能会带来额外的维护成本。
级别 4 - 合同测试 这段代码块的目的是检查一个外部服务的边界交互，并 确保它符合消费服务的契约要求。
契约测试通常类似于组件测试，它们之间的区别最小。一些开发者 将这些测试与Pact测试相关联，这些测试基本上充当了有一个服务器介入的单元测试。然而， 维护这些测试的成本可能不值得。例如，一个Pact测试可能会测试 REST-API loginUser?name=aa&amp;amp;password=bb)并期待一个 JSON-Schema响应，该响应之前已经上传到Pact服务器 。这个模式是静态的，容易出现错误，如API回应中的错误日期格式或时区。 影响可能是巨大的。
第五级 - 端到端测试（也被称为黑盒测试） 目的：通过从头到尾测试整个系统，来检查系统是否满足外部要求，并实现其目标。 端到端测试是可靠和稳健的。一旦超越了搭建测试环境的难关，所付出的努力就会得到回报。这些测试模拟真实行为，消除了模拟的需求。错误更少发生，并且在本地更易于重现。大量 的调试和在生产中的日志记录得到了大多数的回避，同样罕见的事件也得到了规避。开发者更少，甚至不用使用生产数据，这降低了责任并提高了焦点。此外，自动操作（如自动软件更新）如同行为已经被测试过一样，简化了操作。还有更多的优点！一旦以可重复使用的形 式编写测试，它们就可以被集成到负载测试中，以获取功能的全面图像。这些测试也可以在生产环境中连续运行，并在不同工作流的状态中提供实时的视野。如果一个子系统，如外部REST服务，离线，可以立即识别出受影响的用户工作流。
结论 总的来说，测试是软件开发的一个关键方面，测试阶段的选择取决于应用程序的具体要求和目标。虽然模拟测试和单元测试在效用上可能有限，但集成测试和组件测试能够提供有关应用程序行为和性能的宝贵见解。契约测试有助于验证与外部服务的交互，但与组件测试的区 别可能很小。最后，端到端测试提供了对系统功能的最大信任，并允许对整个应用程序进行全面测试。通过选择适当的测试阶段并有效地组合它们，开发人员可以确保你的软件的质量，可靠性和稳健性。
联系方式 GitHub问题.</description></item></channel></rss>