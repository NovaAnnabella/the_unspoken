<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Software Development - หมวดหมู่ - &lt; สิ่งที่ไม่ได้พูดถึง ></title><link>https://novaannabella.github.io/the_unspoken/th/categories/software-development/</link><description>Software Development - หมวดหมู่ - &lt; สิ่งที่ไม่ได้พูดถึง ></description><generator>Hugo -- gohugo.io</generator><language>th-th</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Wed, 31 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/th/categories/software-development/" rel="self" type="application/rss+xml"/><item><title>Testebenen: หาสมดุลที่ถูกต้อง</title><link>https://novaannabella.github.io/the_unspoken/th/test_level/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/th/test_level/</guid><description>Testebenen: การค้นหาสมดุลที่ถูกต้อง ค้นหาสมดุลที่ถูกต้องเป็นเรื่องสำคัญของการทดสอบ
บทนำ หัวข้อการทดสอบ (Testing) ดูเหมือนยังเป็นที่ไม่คุ้นเคยและมีพื้นที่ว่างสำหรับการตีความมากมายจนถึงปัจจุบัน โดยที่พีรมิดการทดสอบแบบดั้งเดิมได้ถูกสงครามและพีรมิดการทดสอบใหม่ก็เกิดขึ้น ตามความคิดของฉัน จำเป็นต้องมีความเข้าใจชัดเจนว่าต้องการทดสอบอะไร การทดสอบที่ต่ำกว่ามักจะไม่เพียงพอและต้องให้ความสำคัญกับการทดสอบพฤติกรรม เพื่อให้แน่ใจว่า API หรือ UI ทำงานตามที่ต้องการ สามารถดูภาพรวมของรูปแบบการทดสอบที่เป็นไปได้ได้ที่นี่: [martinfowler Testing] (https://martinfowler.com/articles /microservice-testing/).
ระดับ 1 - การทดสอบโมคและการทดสอบหน่วย วัตถุประสงค์: ทดสอบชิ้นส่วนซอฟต์แวร์ขนาดเล็กในการใช้งานเพื่อตรวจสอบว่าพวกเขาทำงานตามที่คาดหวังหรือไม่ Mock-Tests และ Unit-Tests อาจมีผลเสียต่อกระบวนการพัฒนาและทำให้เกิดความล่าช้า การทดสอบเหล่านี้มักจะไม่เกี่ยวข้องกับบริบทและมีความเชื่อมโยงกับความเป็นจริงน้อย พวกเขามักเป็นที่จัดสรรสำหรับการรักษาฟังก์ชันที่ไม่จำเป็นผ่าน Unit-Tests ที่มีอยู่แล้ว เมื่อมีการเพิ่ม Mocks จะเกิดการใช้งานที่ไม่จำเป็นขึ้น เนื่องจากผลลัพธ์ที่คาดหวังจาก Mock-Tests จำกัดไว้ที่สิ่งที่ถูกกำหนดไว้ใน Mock ต้นฉบับ เอ็นด์ผู้ใช้ไม่สนใจในฟังก์ชันภายใน ตัวอย่างเช่นในสถานการณ์ Login loginUser(name, password, securityAlgorithmus) หาก Unit-Test ทำการตรวจสอบการตรวจสอบข้อผิดพลาด Null ในพารามิเตอร์ securityAlgorithm การทดสอบจะมากเกินไป เนื่องจากผู้ใช้ไม่สามารถกำหนดพารามิเตอร์ securityAlgorithm ได้
ระดับ 2 - การทดสอบการผสมผสาน วัตถุประสงค์: ตรวจสอบเส้นทางการสื่อสารและปฏิสัมพันธ์ระหว่างคอมโพเนนต์เพื่อตรวจหาข้อผิดพลาดของอินเทอร์เฟส การทดสอบการผสมผสานช่วยให้เราได้ความรู้คุณภาพเกี่ยวกับความสามารถและความอิสระของส่วนต่างๆ ของแอปพลิเคชัน การใช้โมคน้อยลงจะทำให้เข้าใจการทดสอบได้ง่ายขึ้น แต่อย่างไรก็ตาม การทดสอบการผสมผสานยังขาดความเชื่อมโยงและมีความเสี่ยงที่ก ารทดสอบการผสมผสานนั้นจะมีเพียงการทดสอบบูรณาการที่ถูกปกคลุมด้วยโมคน้อยกว่าการทดสอบยูนิตจริงๆ</description></item></channel></rss>