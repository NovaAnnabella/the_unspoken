<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Component Tests - แท็ก - &lt; สิ่งที่ไม่ได้พูดถึง ></title><link>https://novaannabella.github.io/the_unspoken/th/tags/component-tests/</link><description>Component Tests - แท็ก - &lt; สิ่งที่ไม่ได้พูดถึง ></description><generator>Hugo -- gohugo.io</generator><language>th-th</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Wed, 31 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/th/tags/component-tests/" rel="self" type="application/rss+xml"/><item><title>ระดับการทดสอบ: การหาสมดุลที่ถูกต้อง</title><link>https://novaannabella.github.io/the_unspoken/th/test_level/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/th/test_level/</guid><description>ระดับการทดสอบ: การหาสมดุลที่ถูกต้อง บทนำ หัวข้อการทดสอบดูเหมือนว่าจนถึงวันนี้ยังเป็นพื้นที่ใหม่ที่มีความอิสระมากของการตีความ แผนภูมิการทดสอบแบบดั้งเดิมถูกตั้งคำถามและมีการสร้างโครงสร้างการทดสอบใหม่ขึ้น ตามความคิดเห็นของฉัน มันไม่จำเป็นต้องมีแผนภูมิการทดสอบ แต่ต้องมีความเข้าใจอย่างชัดเจนเกี่ยวกับสิ่งที่ต้องทดสอบ การทดสอบในระดับที่ต่ำกว่ามักมีผลประโยชน์น้อยลง ควรเน้นโดยเฉพาะอย่างยิ่งในการทดสอบพฤติกรรมเพื่อให้แน่ใจว่า API หรือ UI ทำงานตามที่ต้องการ ภาพรวมที่ครอบคลุมเกี่ยวกับประเภทของการทดสอบที่เป็นไปได้สามารถพบได้ที่นี่: Martinfowler การทดสอบ.
ระดับ 1 - ทดสอบจำลองและทดสอบยูนิต เป้าหมาย: การทดสอบชิ้นงานซอฟต์แวร์ที่เล็กที่สุดในแอปพลิเคชั่นเพื่อตรวจสอบว่าพวกเขาทำงานตามที่คาดหวังหรือไม่ การทดสอบ Mock และ Unit อาจจะขัดแย้งกันและบ่อยครั้งที่จะขัดขวางกระบวนการพัฒนา การทดสอบเหล่านี้มักจะถูกแยกออกจากบริบทและมีความเกี่ยวข้องกับความเป็นจริงไม่มาก พวกเขามักจะถูกนำมาใช้งานเพื่อรักษาฟังก์ชันที่ไม่จำเป็นโดยใช้การทดสอบ Unit ที่มีอยู่ ทันทีที่เพิ่ม Mock เข้ามา มันก็กลายเป็นภาระ ผลลัพธ์ที่คาดว่าจะได้จากการทดสอบ Mock จำกัดอยู่ที่สิ่งที่ได้รับการกำหนดไว้ใน Mock ต้นฉบับ ผู้ใช้งานสุดท้ายไม่สนใจในฟังก์ชันภายใน ยกตัวอย่างเช่น ในสถานการณ์การเข้าสู่ระบบ loginUser(name, password, securityAlgorithmus) หากการทดสอบ Unit ทำการตรวจสอบ Null บนพารามิเตอร์ securityAlgorithm การทดสอบจะเกินไปเพราะผู้ใช้ไม่สามารถกำหนดพารามิเตอร์ securityAlgorithm ได้.
ระดับ 2 - การทดสอบการรวมระบบ วัตถุประสงค์: ตรวจสอบช่องทางการสื่อสารและการโต้ตอบระหว่างส่วนประกอบเพื่อตรวจจับ ข้อบกพร่องที่ส่วนต่อประสานการทำงาน. การทดสอบการรวมรวมให้ความรู้ที่มีคุณค่าเกี่ยวกับประสิทธิภาพและความพร้อมต่อการทำงานอย่างเป็นอิสระของส่วนต่าง ๆ ของ แอพพลิเคชั่น ด้วยการใช้ Mocks ที่น้อยลง การทดสอบจะเข้าใจง่ายขึ้น อย่างไรก็ตาม ยังขาดส่วนความเข้าใจในบริบทอยู่ และมี ความเสี่ยงที่การทดสอบการรวมจะกลายเป็นการทดสอบยูนิตที่หลอกลวงด้วยการใช้ Mocks น้อยลง.</description></item></channel></rss>