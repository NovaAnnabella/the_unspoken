<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Cloud - แท็ก - &lt; สิ่งที่ไม่ได้พูดถึง ></title><link>https://novaannabella.github.io/the_unspoken/th/tags/cloud/</link><description>Cloud - แท็ก - &lt; สิ่งที่ไม่ได้พูดถึง ></description><generator>Hugo -- gohugo.io</generator><language>th-th</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Fri, 08 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/th/tags/cloud/" rel="self" type="application/rss+xml"/><item><title>ความเสี่ยงของคลาวด์</title><link>https://novaannabella.github.io/the_unspoken/th/risks_of_cloud/</link><pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/th/risks_of_cloud/</guid><description>ความเสี่ยงของคลาวด์ - ทำไมคุณควรคิดสองครั้ง บทนำ ความฮิตของ Cloud ไม่สามารถมองข้ามได้ จากสตาร์ทอัพขนาดเล็กจนถึงบริษัทใหญ่ๆ - ทุกคนเลิศล้ำใน ความยืดหยุ่น, ความเป็นไปได้ในการขยายสมรรถนะและความง่ายดายของ Cloud แต่เช่นเดียวกับ Ikarus ที่ได้รับการเผาไหม้, เมื่อเขาบินใกล้กับดวงอาทิตย์, บริษัทที่ย้ายเข้า cloud โดยไม่ได้คิดค้นอาจจะประสบกับอุบัติการณ์อันตราย ที่ทางมองไม่เห็น
ค่าใช้จ่ายและความโปร่งใส โลกของคลาวด์อาจดูน่าสนใจ แต่ข้างหลังฉากที่สดใสนั้นบ่อนพร้อมความสูงมาก บริษัทที่เพิ่งจะเปลี่ยนมาใช้คลาวด์มักจะสังเกตพบเห็นว่าบิลใช้จ่ายนั้นเพิ่มขึ้นอย่างรวดเร็ว เมื่อเรามาถึงขณะนี้ตรงนี้เป็นเหมือนความบังเอิญที่บริษัทจำนวนมากที่ใช้ AWS ยังได้นำพนักงานออกและหยุดเงินเดือน ความยืดหยุ่นของคลาวด์มักถูกทดแทนด้วยความยากที่จะทายเฉพาะส่วนของต้นทุน ความรู้สึกกับความแพงของคลาวด์ควรเป็นเรื่องชัดเจน และยอมรับมัน
เทคโนโลยีและสถาปัตยกรรม คุณสมบัติที่หลากหลายของ Cloud อาจดูเหมือนฝันที่สวยงาม แต่ก็อาจกลายเป็นภ nightmares อบนะได้ การขาดมาตรฐานพื้นฐานหมายความว่าระบบของคุณอาจไม่สามารถสื่อสารกับเทคโนโลยีมาตรฐานหรือเอกสารภายนอกได้ง่ายหรือไม่สามารถทำได้เลย เพิ่มเติมยิ่งขึ้นคือ โครงสร้างพื้นฐาน สถาปัตยกรรม และบริการมักมีการรวมกันทำให้ต้องปรับแปลงทั้งสองระดับ - สูตรสำหรับความซับซ้อนและความปวดหัว.
ความเสี่ยงด้านความปลอดภัยและความโปร่งใส ในขณะที่ผู้ให้บริการคลาวด์ให้กลไกความปลอดภัยในระดับสูง แต่คลาวด์ยังคงเป็นเป้าหมายที่น่าสนใจสำหรับ การโจมตีทางไซเบอร์ คำถามไม่ใช่ว่ามันปลอดภัยกว่าโซลูชัน On-Premise หรือไม่ แต่คุณต้องการรับความเสี่ยงหรือไม่ เพิ่มเติมกับปัญหาของความโปร่งใส: โดยไม่มีมุมมองชัดเจนเกี่ยวกับการใช้งานและค่าใช้จ่าย การวางแผนงบประมาณที่มีความหมายจะเป็นไปได้ยาก ผ่านค่าใช้จ่ายที่ซ่อนอยู่มากมาย การวางแผนค่าใช้จ่ายควรถูกคูณด้วยอย่างน้อย 2
ยุทธศาสตร์ระยะยาวและทรัพยากรมนุษย์ การเลือกใช้คลาวด์ไม่ควรเป็นการเลือกแบบเดี่ยวๆ แต่ควรถือว่าเป็นส่วนหนึ่งของกลยุทธ์ระยะยาวของธุรกิจทั่วไป ที่จะต้องพิจารณา. นอกจากนี้การเลือกเทคโนโลยียังมีผลกระทบที่ไม่สามารถละเลยได้ต่อประเภทของ ผู้เชี่ยวชาญที่คุณจำเป็นต้องสรรหามาสำหรับธุรกิจของคุณ.
สรุป คลาวด์ไม่ใช่สิ่งที่ถูกนำมาเสนออย่างทั่วถึง มันมีความเสี่ยงที่ควรพิจารณาอย่างจริงจัง ไม่ว่าจะเป็นค่าใช้จ่ายจนถึงความปลอดภัย โดยเฉพาะปัญหาที่เกี่ยวข้องกับเทคโนโลยีและการวางแผนบุคลากร การตัดสินใจเลือกใช้คลาวด์นั้นซับซ้อนและไม่ควรตัดสินใจได้ง่าย ๆ คุ้มค่าที่จะพิจารณาตัวเลือกอื่น ๆ เช่น Kubernetes ซึ่งสามารถให้ความยืดหยุ่น การมาตรฐาน และความโปร่งใส.</description></item><item><title>Illusion Serverless &amp; Cloud</title><link>https://novaannabella.github.io/the_unspoken/th/illusion_serverless_cloud/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/th/illusion_serverless_cloud/</guid><description>ภาพลวงตาของฟังก์ชัน Serverless ในออนไลน์ บทนำ ฉันผิดหวังในความถี่ที่การตลาดชนะความสามารถในการคิดอย่างมีเหตุผล ผู้จัดการหลายคนปล่อยพลังโดยไม่คำนึงถึงผู้เชี่ยวชาญของตัวเอง - นักพัฒนาซอฟต์แวร์ นี่ประกอบด้วยการโยกย้ายข้อมูลเข้าสู่ Cloud การเตือนล่วงหน้า: ผู้ที่ต้องการประหยัดเงินควรปฏิเสธ Cloud เนื่องจากคำว่าฮิตใหม่ &amp;ldquo;Serverless&amp;rdquo; ใน Cloud หมายความว่า: คุณจัดการซอฟต์แวร์เราจัดการฮาร์ดแวร์ แต่ใครที่มีผู้ดูแลระบบที่มีความสามารถ กระตือรือร้น และอยากรู้อยากเห็น คุณก็สามารถดำเนินการ Serverless ได้ด้วยตัวเอง (เช่น KNative).
Serverless ฟังก์ชัน vs Microservices: ไมโครเซอร์วิส Microservice แบบไม่มีสถานะโต้ตอบที่เป็นอย่างกับ ดูแลฟังก์ชัน/โดเมนท์ที่กำหนดและจะถูกใช้งานใน สภาพแวดล้อมการโอเคสเตรียลแบบคอนเตรนเนอร์ สภาพแวดล้อมนี้จะดูแลความจำเป็นเกี่ยวกับสถานที่วาง ระบบรักษาความปลอดภัย, สิ่งกีดขวาง, การบันทึก, เมตริก, ความลับ, ระบบเครือข่าย, การสำรองข้อมูล และมากกว่านั้น บรรดาสิ่งดีที่สำคัญคือ Microservice สามารถทดสอบในท้องถิ่นได้ด้วย ทรัพยากรน้อยนิด และสามารถใช้ได้ทั่วโลก/ไม่รู้จักเซิร์ฟเวอร์ (สามารถนำมาใช้ได้ทุกที่).
ฟังก์ชัน Serverless ตัวอย่างเล็ก ๆ น้อย ๆ ที่ตลก: ประหลาดแต่จริง - ฟังก์ชันของ Serverless ขึ้นอยู่กับสภาพแวดล้อมของเซิร์ฟเวอร์อย่างมาก :) ฟังก์ชันแบบ Serverless ปกติจะดูแลเพียงฟังก์ชัน/โดเมนที่เฉพาะเจาะจงและจะเขียนโดยไม่ใช้เฟรมเวิร์ค ใน รหัสล้วนเพื่อที่จะเร็วกว่า Microservice (ยังเป็นการฝึกที่ดีสำหรับ MicroServices) ประโยชน์ใหญ่ คือ ฟังก์ชันของ Serverless ถูกสเกลอัตโนมัติ.</description></item></channel></rss>