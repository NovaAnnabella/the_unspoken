<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>ทั้งหมด โพสต์ - &lt; สิ่งที่ไม่ได้พูดถึง ></title><link>https://novaannabella.github.io/the_unspoken/th/posts/</link><description>ทั้งหมด โพสต์ | &lt; สิ่งที่ไม่ได้พูดถึง ></description><generator>Hugo -- gohugo.io</generator><language>th-th</language><managingEditor>nova@scene.to (Nova Annabella)</managingEditor><webMaster>nova@scene.to (Nova Annabella)</webMaster><lastBuildDate>Wed, 31 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novaannabella.github.io/the_unspoken/th/posts/" rel="self" type="application/rss+xml"/><item><title>Testebenen: หาสมดุลที่ถูกต้อง</title><link>https://novaannabella.github.io/the_unspoken/th/test_level/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/th/test_level/</guid><description>Testebenen: การค้นหาสมดุลที่ถูกต้อง ค้นหาสมดุลที่ถูกต้องเป็นเรื่องสำคัญของการทดสอบ
บทนำ หัวข้อการทดสอบ (Testing) ดูเหมือนยังเป็นที่ไม่คุ้นเคยและมีพื้นที่ว่างสำหรับการตีความมากมายจนถึงปัจจุบัน โดยที่พีรมิดการทดสอบแบบดั้งเดิมได้ถูกสงครามและพีรมิดการทดสอบใหม่ก็เกิดขึ้น ตามความคิดของฉัน จำเป็นต้องมีความเข้าใจชัดเจนว่าต้องการทดสอบอะไร การทดสอบที่ต่ำกว่ามักจะไม่เพียงพอและต้องให้ความสำคัญกับการทดสอบพฤติกรรม เพื่อให้แน่ใจว่า API หรือ UI ทำงานตามที่ต้องการ สามารถดูภาพรวมของรูปแบบการทดสอบที่เป็นไปได้ได้ที่นี่: [martinfowler Testing] (https://martinfowler.com/articles /microservice-testing/).
ระดับ 1 - การทดสอบโมคและการทดสอบหน่วย วัตถุประสงค์: ทดสอบชิ้นส่วนซอฟต์แวร์ขนาดเล็กในการใช้งานเพื่อตรวจสอบว่าพวกเขาทำงานตามที่คาดหวังหรือไม่ Mock-Tests และ Unit-Tests อาจมีผลเสียต่อกระบวนการพัฒนาและทำให้เกิดความล่าช้า การทดสอบเหล่านี้มักจะไม่เกี่ยวข้องกับบริบทและมีความเชื่อมโยงกับความเป็นจริงน้อย พวกเขามักเป็นที่จัดสรรสำหรับการรักษาฟังก์ชันที่ไม่จำเป็นผ่าน Unit-Tests ที่มีอยู่แล้ว เมื่อมีการเพิ่ม Mocks จะเกิดการใช้งานที่ไม่จำเป็นขึ้น เนื่องจากผลลัพธ์ที่คาดหวังจาก Mock-Tests จำกัดไว้ที่สิ่งที่ถูกกำหนดไว้ใน Mock ต้นฉบับ เอ็นด์ผู้ใช้ไม่สนใจในฟังก์ชันภายใน ตัวอย่างเช่นในสถานการณ์ Login loginUser(name, password, securityAlgorithmus) หาก Unit-Test ทำการตรวจสอบการตรวจสอบข้อผิดพลาด Null ในพารามิเตอร์ securityAlgorithm การทดสอบจะมากเกินไป เนื่องจากผู้ใช้ไม่สามารถกำหนดพารามิเตอร์ securityAlgorithm ได้
ระดับ 2 - การทดสอบการผสมผสาน วัตถุประสงค์: ตรวจสอบเส้นทางการสื่อสารและปฏิสัมพันธ์ระหว่างคอมโพเนนต์เพื่อตรวจหาข้อผิดพลาดของอินเทอร์เฟส การทดสอบการผสมผสานช่วยให้เราได้ความรู้คุณภาพเกี่ยวกับความสามารถและความอิสระของส่วนต่างๆ ของแอปพลิเคชัน การใช้โมคน้อยลงจะทำให้เข้าใจการทดสอบได้ง่ายขึ้น แต่อย่างไรก็ตาม การทดสอบการผสมผสานยังขาดความเชื่อมโยงและมีความเสี่ยงที่ก ารทดสอบการผสมผสานนั้นจะมีเพียงการทดสอบบูรณาการที่ถูกปกคลุมด้วยโมคน้อยกว่าการทดสอบยูนิตจริงๆ</description></item><item><title>AI Hype</title><link>https://novaannabella.github.io/the_unspoken/th/ai_behind_the_hype/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/th/ai_behind_the_hype/</guid><description>KI ในโลกจริง - คิดเกินกิจกรรมต่อ เรื่องราวเกี่ยวกับเทคโนโลยีปัจจัยได้รับความนิยมในการแสดงความคิดเห็นและสื่อสารในปัจจุบันโดยเฉพาะอย่างยิ่งในด้านปัญญาประดิษฐ์ (AI) แต่ก่อนที่เราจะเริ่มสนใจในโปรแกรมและสมองปัญญาประดิษฐ์ จำเป็นต้องศึกษาเชิงลึกเกี่ยวกับความเป็นจริงของ KI ในชีวิตประจำวันของเรา
การแนะนำ เมื่อเรื่องการใช้ปัญญาประดิษฐ์ (AI) เกี่ยวข้อง จะมีความตื่นเต้นและความคาดหวังอย่างมากน้อยไม่แน่นอน บางคนเชื่อว่า AI จะเปลี่ยนแปลงโลกการทำงานและทำให้ความสามารถของมนุษย์ไม่จำเป็นต้องใช้แล้ว แต่ก่อนที่เราจะพุ่งเข้าสู่โลกของ AI เราควรให้ความสำคัญกับบางจุดสำคัญๆ ของ AI ที่เราต้องสามารถเข้าใจและเคารพได้ ในความเป็นจริง AI ไม่ใช่สิ่งใหม่และมีข้อจำกัดที่สำคัญที่เราต้องเข้าใจและเคารพ หลักการคือ AI เป็นเครื่องมือเพียงอย่างเดียว ไม่ได้เช่นฉากในภาพยนตร์ที่เคยดูเช่น Terminator และ AI ในปัจจุบันเช่น ChatGPT เป็นตัวอย่างที่ดีของซอฟต์แวร์ที่ออกแบบไว้สำหรับการให้บริการ และไม่ได้ตัดสินใจเหมือนเป็นมีดพกสวิสซึ่งไม่เป็นประโยชน์มากหรือพูดได้ว่าไม่น่าสะดวก มีคำถามบางส่วนที่ก่อกวน: * ผู้ที่เชี่ยวชาญด้านคอมพิวเตอร์ทุกคนที่เชื่อว่า AI เป็นสิ่งใหม่หรือสามารถเข้ามาครอบครองงานของพวกเขาได้ในที่สุด ไม่รู้จักขีดจำกัดของตนเองและความเชี่ยวชาญของตนเองให้ดีพอแล้วหรือยัง? * นักวิทยาศาสตร์ข้อมูลที่เปลี่ยนสู่โมเดล AI: ทำไมโมเดล AI ของคุณนั้นแย่กว่าโมเดลภาษาที่สามารถทำได้ทุกอย่าง? คุณได้ทำอะไรก่อนหน้านี้และคุณขาดอะไรที่จะสร้างโมเดลที่ดีเท่ากับสำหรับ usecase ของคุณ?
เข้าใจขอบเขต KI โมเดลรวมถึงจาก GPT จะถูกฝึกด้วยข้อมูลและรูปแบบที่มีอยู่ พวกเขาเป็นผู้ดีในการรู้จักแนวโน้มและสามารถสร้างเนื้อหาขึ้นอยู่กับการฝึกฝนนั้น แต่พวกเขายังขาดความเข้าใจและความสามารถในการคิดพิเศษเกินการฝึกฝนนั้น การยอมรับขอบเขตเหล่านี้ช่วยให้ตั้งค่าความคาดหมายอย่างเหมาะสม สิ่งที่ไม่มีมาก่อนก็จะไม่เกิดขึ้น ข้อมูลคุณภาพดี ลับ และปลอดภัยเป็นส่วนน้อย จะมีผู้เริ่มต้นมากกว่าผู้เชี่ยวชาญเสมอ ดังนั้น KI เช่นเดียวกับตัวอย่าง &amp;ldquo;Hello World&amp;rdquo; มักใช้งานเพียงในระดับต่ำ ในหลายๆ ด้านเช่นนักพัฒนาซึ่งกลัวเสียงงานหลุดอาจต้องมีความสำคัญในคุณภาพของงานของพวกเขาอย่างจริงจัง</description></item><item><title>Illusion Serverless &amp; Cloud</title><link>https://novaannabella.github.io/the_unspoken/th/illusion_serverless_cloud/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/th/illusion_serverless_cloud/</guid><description>อันตรายของฟังก์ชัน Serverless ใน Cloud บทนำ ฉันผิดหวังเกี่ยวกับวิธีการที่การตลาดมักชนะความเหมาะสมของมนุษย์ด้วยความถี่มาก ผู้จัดการหลายคนมักไม่ให้ความสำคัญกับผู้เชี่ยวชาญของตนเอง - นั่นก็เหมือนกับการโยกย้ายไปยัง Cloud มีรอยยิ้มเสคเรื่อง &amp;ldquo;Serverless&amp;rdquo; ใน Cloud แปลว่า: คุณใช้เวลาดูแลซอฟต์แวร์ และเราจะดูแลฮาร์ดแวร์ แต่ถ้าคุณมี Administrator ที่สามารถทำงานได้ดีและกระตือรือร้นที่จะเรียนรู้ คุณสามารถใช้ Serverless เองได้ (เช่น KNative). Serverless ฟังก์ชัน vs ไมโครเซอร์วิส: Titel ## Unterüberschrift Fett gedruckter Text Kursiver Text - Eine Liste - Mit verschiedenen - Punkten Ein Code-Block: var x = 5; console.log(x); Ein Link: Hier klicken Ein Bild: # หัวข้อ ## หัวข้อย่อย ข้อความหนา ข้อความเอียง - รายการ - ด้วยหลาย - จุด บล็อกโค้ด: var x = 5; console.</description></item><item><title>กลับไปยัง Maven?</title><link>https://novaannabella.github.io/the_unspoken/th/back_to_maven/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><author>Nova Annabella</author><guid>https://novaannabella.github.io/the_unspoken/th/back_to_maven/</guid><description>กลับไปใช้งาน Maven อีกครั้งหรือเปล่า? ไม่สามารถแปลได้เนื่องจากเป็นโค้ดของ Markdown ซึ่งไม่มีเนื้อหาที่เป็นภาษาโปรแกรมใดๆ ที่ต้องแปลเป็นภาษามนุษย์
10 ปีของ Gradle การมองหาความสะดวกและการเดินทางสั้นๆในการค้นพบความแข็งแกร่งของ Maven. ไม่มีข้อความใน Markdown
การสร้างศักย์ของนักพัฒนา - เราต้องการเครื่องมือที่ช่วยประหยัดเวลามากขึ้น หัวเรื่องที่ถูกมองข้ามหรือไม่ได้ถูกพูดคุยบ่อย ๆ นั้นดึงดูดแรงดึงดูดใจฉันมาก บ่อยครั้งที่เทคโนโลยีที่โดดเด่นได้ถูกนำมาใช้แล้ว แต่ไม่มีใครพูดถึงปัญหาที่เกี่ยวข้องกับมัน การพัฒนามีความซับซ้อนมากขึ้นเป็นอย่างมากในปัจจุบัน ด้วยคำศัพท์ที่เป็นที่นิยมอย่าง “Serverless”, “Low Code”, “IaC”, “Big Data”, “Cloud”, “DevOps”, “You Build it You run it” แต่ละประเภทนั้นก็มีงานขยายเพิ่มขึ้น ทำให้ไม่มีผู้เชี่ยวชาญกลางแล้ว และเรื่องไหนก็ต้องละเลยในที่สุด ดังนั้นการอัตโนมัติและการประหยัดเวลาเป็นสิ่งที่สำคัญมาก “Don’t make me think” และ “Works out of the Box” เป็นคุณภาพที่ดีใน Gradle ที่ยังไม่เห็นได้ ในความเป็นจริง Gradle ไม่ได้เป็นเครื่องมือที่ทำให้ง่ายขึ้น ซึ่ง Gradle ไม่ได้เป็นเครื่องมือที่ทำให้ง่ายขึ้นเพียงอย่างเดียว ยังมีเครื่องมืออื่น ๆ ที่ทำให้เรางงมากขึ้นเช่นกัน ซึ่งทำให้เรามีมากขึ้นแทนการลดลง
การค้นหาที่มีอยู่แต่เป็นภาพลวงตาเพื่อความง่ายและการอัตโนมัติ ตั้งแต่ใช้ SOAP ฉันมีความเกลียด XML-based configuration อย่างลึกซึ้ง ด้วย Gradle ฉันคิดว่าเขียนสคริปต์ผูกมันจะง่ายมากนั่น แต่นั้นเป็นความหวังและแรงจูงใจที่ลดลงจากเวลาไปเวลามา Gradle มุ่งหวังที่จะมีความยืดหยุ่นและสละคุณภาพของการออโตเมชันเพื่อให้ผู้พัฒนาทำตามแนวโน้มโดยไม่คำนึงถึงผลกระทบต่อความเชื่อถือของซอฟต์แวร์ เพื่อทำให้ Gradle Build Scripts ง่ายและสามารถบำรุงรักษาได้ จำเป็นต้องมีว discipline แข็งแกร่ง เรียงร้อย แต่ว่า discipline ของชาวโค้ดนั้นมีน้อยมากในซอร์สโค้ดแล้ว จึงยิ่งไม่มีใน Build Scripts.</description></item></channel></rss>